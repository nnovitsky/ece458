[{"/home/vcm/evo1/ece458/frontend/src/index.js":"1","/home/vcm/evo1/ece458/frontend/src/App.js":"2","/home/vcm/evo1/ece458/frontend/src/reportWebVitals.js":"3","/home/vcm/evo1/ece458/frontend/src/components/Navigation.js":"4","/home/vcm/evo1/ece458/frontend/src/components/ProtectedRoute.js":"5","/home/vcm/evo1/ece458/frontend/src/components/AdminRoute.js":"6","/home/vcm/evo1/ece458/frontend/src/components/login/LoginPage.js":"7","/home/vcm/evo1/ece458/frontend/src/components/admin/AdminPage.js":"8","/home/vcm/evo1/ece458/frontend/src/components/user/UserProfilePage.js":"9","/home/vcm/evo1/ece458/frontend/src/components/import/ImportPage.js":"10","/home/vcm/evo1/ece458/frontend/src/components/model/ModelTablePage.js":"11","/home/vcm/evo1/ece458/frontend/src/components/instrument/InstrumentTablePage.js":"12","/home/vcm/evo1/ece458/frontend/src/api/authServices.js":"13","/home/vcm/evo1/ece458/frontend/src/components/model/ModelDetailView.js":"14","/home/vcm/evo1/ece458/frontend/src/components/instrument/InstrumentDetailView.js":"15","/home/vcm/evo1/ece458/frontend/src/components/user/EditUserPopup.js":"16","/home/vcm/evo1/ece458/frontend/src/components/import/ImportInstructions.js":"17","/home/vcm/evo1/ece458/frontend/src/api/userServices.js":"18","/home/vcm/evo1/ece458/frontend/src/components/admin/AddUserPopup.js":"19","/home/vcm/evo1/ece458/frontend/src/components/model/ModelFilterBar.js":"20","/home/vcm/evo1/ece458/frontend/src/components/model/AddModelPopup.js":"21","/home/vcm/evo1/ece458/frontend/src/components/model/ModelTable.js":"22","/home/vcm/evo1/ece458/frontend/src/api/instrumentServices.js":"23","/home/vcm/evo1/ece458/frontend/src/components/instrument/InstrumentFilterBar.js":"24","/home/vcm/evo1/ece458/frontend/src/components/instrument/InstrumentTable.js":"25","/home/vcm/evo1/ece458/frontend/src/components/generic/GenericTable.js":"26","/home/vcm/evo1/ece458/frontend/src/components/generic/Util.js":"27","/home/vcm/evo1/ece458/frontend/src/api/modelServices.js":"28","/home/vcm/evo1/ece458/frontend/src/components/generic/GenericPopup.js":"29","/home/vcm/evo1/ece458/frontend/src/components/instrument/AddInstrumentPopup.js":"30","/home/vcm/evo1/ece458/frontend/src/components/instrument/AddCalibrationPopup.js":"31"},{"size":547,"mtime":1613060877355,"results":"32","hashOfConfig":"33"},{"size":3921,"mtime":1613060877351,"results":"34","hashOfConfig":"33"},{"size":362,"mtime":1613060796389,"results":"35","hashOfConfig":"33"},{"size":1139,"mtime":1613060877351,"results":"36","hashOfConfig":"33"},{"size":622,"mtime":1613060877351,"results":"37","hashOfConfig":"33"},{"size":480,"mtime":1613060877351,"results":"38","hashOfConfig":"33"},{"size":1786,"mtime":1613060877355,"results":"39","hashOfConfig":"33"},{"size":3141,"mtime":1613060877351,"results":"40","hashOfConfig":"33"},{"size":4313,"mtime":1613060877355,"results":"41","hashOfConfig":"33"},{"size":3525,"mtime":1613060877351,"results":"42","hashOfConfig":"33"},{"size":7028,"mtime":1613060877355,"results":"43","hashOfConfig":"33"},{"size":8139,"mtime":1613060877355,"results":"44","hashOfConfig":"33"},{"size":1160,"mtime":1613060877351,"results":"45","hashOfConfig":"33"},{"size":9806,"mtime":1613060877355,"results":"46","hashOfConfig":"33"},{"size":11577,"mtime":1613060877355,"results":"47","hashOfConfig":"33"},{"size":2391,"mtime":1613060877355,"results":"48","hashOfConfig":"33"},{"size":253,"mtime":1613060877351,"results":"49","hashOfConfig":"33"},{"size":2595,"mtime":1613060877351,"results":"50","hashOfConfig":"33"},{"size":2665,"mtime":1613060877351,"results":"51","hashOfConfig":"33"},{"size":2330,"mtime":1613060877355,"results":"52","hashOfConfig":"33"},{"size":8127,"mtime":1613060877355,"results":"53","hashOfConfig":"33"},{"size":2120,"mtime":1613060877355,"results":"54","hashOfConfig":"33"},{"size":7545,"mtime":1613060877351,"results":"55","hashOfConfig":"33"},{"size":2786,"mtime":1613060877355,"results":"56","hashOfConfig":"33"},{"size":2484,"mtime":1613060877355,"results":"57","hashOfConfig":"33"},{"size":2803,"mtime":1613060877351,"results":"58","hashOfConfig":"33"},{"size":1000,"mtime":1613060877351,"results":"59","hashOfConfig":"33"},{"size":12805,"mtime":1613060877351,"results":"60","hashOfConfig":"33"},{"size":2474,"mtime":1613060877351,"results":"61","hashOfConfig":"33"},{"size":8456,"mtime":1613060877355,"results":"62","hashOfConfig":"33"},{"size":2310,"mtime":1613060877355,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"nq14u3",{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"66"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"/home/vcm/evo1/ece458/frontend/src/index.js",[],["137","138"],"/home/vcm/evo1/ece458/frontend/src/App.js",["139"],"import './App.css';\n\nimport React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\n\nimport LoginPage from './components/login/LoginPage';\nimport AdminPage from './components/admin/AdminPage';\nimport UserProfilePage from './components/user/UserProfilePage';\nimport ImportPage from './components/import/ImportPage';\nimport ModelTablePage from './components/model/ModelTablePage';\nimport ModelDetailPage from './components/model/ModelDetailView';\nimport InstrumentTablePage from './components/instrument/InstrumentTablePage';\nimport InstrumentDetailView from './components/instrument/InstrumentDetailView';\nimport Navigation from './components/Navigation';\nimport ProtectedRoute from './components/ProtectedRoute';\nimport AdminRoute from './components/AdminRoute';\n\nimport AuthServices from './api/authServices';\nconst authServices = new AuthServices();\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      logged_in: localStorage.getItem('token') ? true : false,\n      username: '',\n      error_message: '',\n      admin: false,\n      redirect: null\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.logged_in) {\n      authServices.getCurrentUser().then((result) => {\n        if (result.success) {\n          this.setState({ \n            username: result.data.username,\n            admin: result.data.is_staff,\n          })\n        } else {\n          localStorage.removeItem('token');\n          this.setState({\n            logged_in: false,\n            username: '',\n            admin: false\n          });\n        }\n    }\n    )\n    }\n    else {\n      console.log(\"Not Logged in\")\n    }\n  }\n\n  handle_login = (e, data) => {\n    if (data.username === \"\" || data.password === \"\") {\n      this.setState({ error_message: 'Please complete all fields' });\n    }\n    else {\n      e.preventDefault();\n      authServices.login(data)\n        .then(res => res.json())\n        .then(json => {\n          if (typeof json.user === 'undefined') {\n            this.setState({ error_message: 'Incorrect Login Credentials' });\n          }\n          else {\n            localStorage.setItem('token', json.token);\n            this.setState({\n              logged_in: true,\n              username: json.user.username,\n              admin: json.user.is_staff,\n              redirect: true\n            });\n            this.setState({ error_message: '' });\n          }\n        });\n    }\n  };\n\n\n  handle_logout = () => {\n    localStorage.removeItem('token');\n    this.setState({ \n      logged_in: false, \n      username: '',\n      admin: false,\n      redirect: false\n   });\n  };\n\n\n\n  render(\n    form = <LoginPage handle_login={this.handle_login} error_message={this.state.error_message} isLoggedIn={this.state.logged_in}/>,\n  ) {\n    return (\n      <BrowserRouter>\n        <div>\n          <Navigation logged_in={this.state.logged_in} handle_logout={this.handle_logout} is_admin={this.state.admin}/>\n          <Switch>\n            <ProtectedRoute path=\"/models\" component={ModelTablePage} is_admin={this.state.admin} exact />\n            <ProtectedRoute path=\"/models/:pk\" component={ModelDetailPage} is_admin={this.state.admin} exact />\n            <ProtectedRoute path=\"/instruments\" component={InstrumentTablePage} is_admin={this.state.admin} exact />\n            <ProtectedRoute path=\"/instruments/:pk\" component={InstrumentDetailView} is_admin={this.state.admin} exact />\n            <ProtectedRoute path=\"/import\" component={ImportPage} exact />\n            <ProtectedRoute path=\"/user-profile\" component={UserProfilePage} exact />\n            <AdminRoute is_admin={this.state.admin} path=\"/admin\" component={AdminPage} exact />\n          </Switch>\n          {this.state.logged_in ? null : form}\n          {this.state.redirect ? (<Redirect to=\"/user-profile\"/>) : null}\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","/home/vcm/evo1/ece458/frontend/src/reportWebVitals.js",[],"/home/vcm/evo1/ece458/frontend/src/components/Navigation.js",[],"/home/vcm/evo1/ece458/frontend/src/components/ProtectedRoute.js",[],"/home/vcm/evo1/ece458/frontend/src/components/AdminRoute.js",[],"/home/vcm/evo1/ece458/frontend/src/components/login/LoginPage.js",["140","141"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport \"./Login.css\";\nimport AuthServices from '../../api/authServices';\nimport { Redirect } from \"react-router-dom\";\nconst authServices = new AuthServices();\n\nclass login extends React.Component {\n    state = {\n        username: '',\n        password: '',\n        redirect: null\n    };\n\n    async componentDidMount() {\n        this.setState({\n            redirect: null\n        })\n    }\n\n    handle_change = e => {\n        const name = e.target.name;\n        const value = e.target.value;\n        this.setState(prevstate => {\n            const newState = { ...prevstate };\n            newState[name] = value;\n            return newState;\n        });\n    };\n\n    render() {\n        return (\n            <div style={{textAlign: \"center\"}}>\n            <form className=\"login\" onSubmit={e => this.props.handle_login(e, this.state)}>\n                <h2>Log In</h2>\n                <label htmlFor=\"username\">Username</label>\n                <input\n                    type=\"text\"\n                    name=\"username\"\n                    value={this.state.username}\n                    onChange={this.handle_change}\n                />\n                <label htmlFor=\"password\">Password</label>\n                <input\n                    type=\"password\"\n                    name=\"password\"\n                    value={this.state.password}\n                    onChange={this.handle_change}\n                />\n                <input type=\"submit\" />\n                <h5>{this.props.error_message}</h5>\n            </form>\n            </div>\n        );\n    }\n}\n\nexport default login;\n\nlogin.propTypes = {\n    handle_login: PropTypes.func.isRequired,\n    error_message: PropTypes.string.isRequired,\n    isLoggedIn: PropTypes.bool\n  };\n","/home/vcm/evo1/ece458/frontend/src/components/admin/AdminPage.js",[],"/home/vcm/evo1/ece458/frontend/src/components/user/UserProfilePage.js",[],"/home/vcm/evo1/ece458/frontend/src/components/import/ImportPage.js",[],"/home/vcm/evo1/ece458/frontend/src/components/model/ModelTablePage.js",[],"/home/vcm/evo1/ece458/frontend/src/components/instrument/InstrumentTablePage.js",[],"/home/vcm/evo1/ece458/frontend/src/api/authServices.js",["142"],"const API_URL = 'http://localhost:8000';\n\n\nexport default class AuthServices {\n  constructor() { }\n\n  async login(data) {\n\n    const url = `${API_URL}/token_auth/`;\n\n    return fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n  }\n\n  async getCurrentUser() {\n\n    const token = localStorage.getItem('token');\n\n    let result = {\n      success: true,\n      data: [],\n    }\n\n    const url = `${API_URL}/current_user/`;\n\n    return fetch(url, {\n      headers: {\n        Authorization: `JWT ${token}`\n      }\n    })\n      .then(res => res.json())\n      .then(\n        (json) => {\n          console.log(json);\n          if (json.detail === 'Signature has expired.') {\n            console.log(\"GET NEW TOKEN\")\n            result.success = false;\n          }\n          if(json.detail === 'Error decoding signature.')\n          {\n            result.success = false;\n          }\n          result.data = json\n          return result\n        },\n        (error) => {\n          console.log(error)\n          result.success = false;\n          return result\n        }\n      )\n  }\n}","/home/vcm/evo1/ece458/frontend/src/components/model/ModelDetailView.js",["143","144","145","146"],"import React, { Component } from 'react';\nimport EditModelPopup from './AddModelPopup';\nimport DeletePopup from '../generic/GenericPopup';\nimport Table from 'react-bootstrap/Table';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { Redirect } from \"react-router-dom\";\nimport { withRouter } from 'react-router';\nimport '../generic/General.css';\nimport logo from '../../assets/HPT_logo_crop.png';\nimport PropTypes from 'prop-types';\n\nimport ModelServices from \"../../api/modelServices\";\nimport InstrumentServices from '../../api/instrumentServices';\nimport { rawErrorsToDisplayed } from '../generic/Util';\nimport ErrorFile from '../../api/ErrorMapping/ModelErrors.json';\n\nconst modelServices = new ModelServices();\nconst instrumentServices = new InstrumentServices();\nlet instrumentData = [];\nlet history;\n\n\nclass ModelDetailView extends React.Component {\n    constructor(props) {\n        super(props);\n        const arr = props.location.pathname.split('/')\n\n        this.state = {\n            redirect: null,\n            model_info: {\n                pk: arr[arr.length - 1],\n                vendor: '',\n                model_number: '',\n                description: '',\n                comment: '',\n                calibration_frequency: '',\n                instruments: []\n            },\n            editPopup: {\n                isShown: false,\n                errors: []\n            },\n            deletePopup: {\n                isShown: false,\n                errors: []\n            }\n\n        }\n\n        this.onMoreClicked = this.onMoreClicked.bind(this);\n        this.onEditClicked = this.onEditClicked.bind(this);\n        this.onEditSubmit = this.onEditSubmit.bind(this);\n        this.onEditClose = this.onEditClose.bind(this);\n        this.onDeleteClicked = this.onDeleteClicked.bind(this);\n        this.onDeleteSubmit = this.onDeleteSubmit.bind(this);\n        this.onDeleteClose = this.onDeleteClose.bind(this);\n        this.onVendorSearch = this.onVendorSearch.bind(this);\n    }\n\n    async componentDidMount() {\n        await this.updateInfo();\n    }\n\n    render(\n        adminButtons = <div>\n                        <Button onClick={this.onEditClicked}>Edit Model</Button>\n                        <Button onClick={this.onDeleteClicked}>Delete Model</Button>\n                    </div>\n    ) {\n        let deletePopup = (this.state.deletePopup.isShown) ? this.makeDeletePopup() : null;\n        let editPopup = (this.state.editPopup.isShown) ? this.makeEditPopup() : null;\n\n        if (this.state.redirect != null) {\n            return <Redirect to={this.state.redirect} />\n        }\n        return (\n            <div>\n                {deletePopup}\n                {editPopup}\n            <div className=\"background\">\n                <div className=\"row mainContent\">\n                        <div className=\"col-2 text-center button-col\">\n                        <img src={logo} alt=\"Logo\" />\n                            {this.props.is_admin ? adminButtons : null}\n                    </div>\n                    <div className=\"col-10\">\n                        <h2>{`Model: ${this.state.model_info.model_number}`}</h2>\n                        <Row>\n                            <Col>{this.makeDetailsTable()}</Col>\n                            <Col xs={6}>\n                                {this.makeInstrumentsTable()}\n                            </Col>\n                        </Row>\n                    </div>\n                </div>\n            </div>\n            </div >\n        );\n    }\n    \n    makeDeletePopup() {\n        let body = (\n            <p>Are you sure you want to delete Model: {this.state.model_info.model_number}?</p>\n        )\n        return (\n            <DeletePopup\n                show={this.state.deletePopup.isShown}\n                body={body}\n                headerText=\"Warning!\"\n                closeButtonText=\"Cancel\"\n                submitButtonText=\"Delete\"\n                onClose={this.onDeleteClose}\n                onSubmit={this.onDeleteSubmit}\n                submitButtonVariant=\"danger\"\n                errors={this.state.deletePopup.errors}\n            />\n        )\n    }\n\n    makeEditPopup() {\n        return (\n            <EditModelPopup\n                isShown={this.state.editPopup.isShown}\n                onSubmit={this.onEditSubmit}\n                onClose={this.onEditClose}\n                currentModel={this.state.model_info}\n                errors={this.state.editPopup.errors}\n            />\n        )\n    }\n\n    makeDetailsTable() {\n        let modelInfo = this.state.model_info;\n        return (\n            <Table bordered hover>\n                <tbody>\n                    <tr>\n                        <td><strong>Vendor</strong></td>\n                        <td>{modelInfo.vendor}</td>\n                    </tr>\n                    <tr>\n                        <td><strong>Model</strong></td>\n                        <td>{modelInfo.model_number}</td>\n                    </tr>\n                    <tr>\n                        <td><strong>Description</strong></td>\n                        <td>{modelInfo.description}</td>\n                    </tr>\n                    <tr>\n                        <td><strong>Comment</strong></td>\n                        <td>{modelInfo.comment}</td>\n                    </tr>\n                    <tr>\n                        <td><strong>Calibration Frequency</strong></td>\n                        <td>{modelInfo.calibration_frequency}</td>\n                    </tr>\n                </tbody>\n            </Table>\n        )\n    }\n\n    makeInstrumentsTable() {\n        let rows = [];\n        let count = 1;\n        this.state.model_info.instruments.forEach((element) => {\n            let currentRow = [];\n            currentRow.push(\n                <td>{count}</td>\n            )\n            currentRow.push(\n                <td>{element[\"serial_number\"]}</td>\n            )\n            currentRow.push(\n                <td><Button onClick={this.onMoreClicked} value={element[\"pk\"]}>More</Button></td>\n            )\n            count++;\n            rows.push(\n                <tr>{currentRow}</tr>\n            )\n        });\n\n        return (\n            <Table bordered hover>\n                <thead>\n                    <tr>\n                        <th colSpan=\"3\" className=\"text-center\">Instances by Serial Number</th>\n                    </tr>\n                    <tr>\n                        <th>#</th>\n                        <th>Serial Number</th>\n                        <th>More</th>\n                    </tr>\n\n                </thead>\n                <tbody>\n                    {rows}\n                </tbody>\n            </Table>\n        )\n\n    }\n\n\n\n    onMoreClicked(e) {\n        this.setState({\n            redirect: `/instruments/${e.target.value}`\n        })\n    }\n\n    onEditClicked() {\n        this.setState({\n            editPopup: {\n                ...this.state.editPopup,\n                isShown: true\n            }\n        })\n    }\n\n    async onEditSubmit(editedModel) {\n        await modelServices.editModel(editedModel.pk, editedModel.vendor, editedModel.model_number, editedModel.description, editedModel.comment, editedModel.calibration_frequency).then(result => {\n            if (result.success) {\n                this.setState({\n                    deletePopup: {\n                        ...this.state.deletePopup,\n                        isShown: false\n                    }\n                })\n\n                this.updateInfo();\n                this.onEditClose();\n            } else {\n                let formattedErrors = rawErrorsToDisplayed(result.errors, ErrorFile[\"add_model\"]);\n                this.setState({\n                    editPopup: {\n                        ...this.state.editPopup,\n                        errors: formattedErrors\n                    }\n                })\n            }\n        })\n\n    }\n\n    onEditClose() {\n        this.setState({\n            editPopup: {\n                ...this.state.editPopup,\n                isShown: false,\n                errors: []\n            }\n        })\n    }\n\n    onDeleteClicked() {\n        this.setState({\n            deletePopup: {\n                ...this.state.deletePopup,\n                isShown: true,\n            }\n        })\n    }\n\n    onDeleteClose() {\n        this.setState({\n            deletePopup: {\n                ...this.state.deletePopup,\n                errors: [],\n                isShown: false,\n            }\n        })\n    }\n\n    async onDeleteSubmit() {\n        await modelServices.deleteModel(this.state.model_info.pk).then(result => {\n            if (result.success) {\n                this.onDeleteClose();\n                this.setState({\n                    redirect: '/models/',\n                    deletePopup: {\n                        ...this.state.deletePopup,\n                        isShown: false\n                    }\n                })\n            } else {\n                let formattedErrors = rawErrorsToDisplayed(result.errors, ErrorFile[\"delete_model\"]);\n                this.setState({\n                    deletePopup: {\n                        ...this.state.deletePopup,\n                        errors: formattedErrors\n                    }\n                })\n            }\n        })\n    }\n\n    onVendorSearch(search) {\n        return ([])\n    }\n\n    async updateInfo() {\n        await modelServices.getModel(this.state.model_info.pk).then((result) => {\n            if (result.success) {\n                this.setState({\n                    model_info: result.data\n                })\n            } else {\n                console.log(\"error\")\n            }\n        })\n    }\n}\nexport default withRouter(ModelDetailView);\n\nModelDetailView.propTypes = {\n    is_admin: PropTypes.bool.isRequired\n}","/home/vcm/evo1/ece458/frontend/src/components/instrument/InstrumentDetailView.js",[],"/home/vcm/evo1/ece458/frontend/src/components/user/EditUserPopup.js",[],"/home/vcm/evo1/ece458/frontend/src/components/import/ImportInstructions.js",[],"/home/vcm/evo1/ece458/frontend/src/api/userServices.js",["147"],"import userData from './userData.json';\nconst API_URL = 'http://localhost:8000';\n\nexport default class UserServices {\n    constructor() { }\n\n    getUsers() {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n        }\n\n        const url = `${API_URL}/api/users/`;\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                Authorization: `JWT ${token}`\n            },\n        })\n            .then(res => res.json())\n            .then(\n                (json) => {\n                    if (json.detail === 'Signature has expired.') {\n                        console.log(\"GET NEW TOKEN\")\n                        result.success = false;\n                    }\n                    result.data = json.data\n                    return result\n                },\n                (error) => {\n                    console.log(error)\n                    result.success = false;\n                    return result\n                }\n            )\n    }\n\n\n    async addUser(username, password, first_name, last_name, email) {\n        let data = {\n            username: username,\n            password: password,\n            first_name: first_name,\n            last_name: last_name,\n            email: email\n        }\n        const token = localStorage.getItem('token');\n\n        return fetch(`${API_URL}/create_user/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => res.json())\n            .then(json => {\n                console.log(json)\n            })\n    }\n\n    async editUser(username, password, first_name, last_name) {\n        let data = {\n            username: username,\n            password: password,\n            first_name: first_name,\n            last_name: last_name,\n        }\n        const token = localStorage.getItem('token');\n\n        return fetch(`${API_URL}/current_user/`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => res.json())\n            .then(json => {\n                return json;\n            })\n    }\n\n\n    getUser(pk) {\n        return userData.usersByKey[pk];\n        // const url = `${API_URL}/api/users/${pk}`;\n        // return axios.get(url).then(response => response.data);\n    }\n}","/home/vcm/evo1/ece458/frontend/src/components/admin/AddUserPopup.js",[],"/home/vcm/evo1/ece458/frontend/src/components/model/ModelFilterBar.js",[],"/home/vcm/evo1/ece458/frontend/src/components/model/AddModelPopup.js",[],"/home/vcm/evo1/ece458/frontend/src/components/model/ModelTable.js",["148"],"import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport './ModelTable.css'\n\nconst headerText = [\"Model Number\", \"Vendor\", \"Description\", \"Comments\", \"Calibration (days)\", \"More\"];\nconst keys = [\"model_number\", \"vendor\", \"description\", \"comment\", \"calibration_frequency\"];\n\n//props\nlet data;   //prop of array of model data to display\n//'onDetailRequested': function passed in prop that will be called when detail view is requested, will be passed model pk\n\nconst modelTable = (props) => {\n    data = props.data;\n    let header = createHeader(props.sortData);\n    let body = createBody(props.onDetailRequested); \n\n    return (\n        <Table striped bordered hover>\n            <thead>\n                {header}\n            </thead>\n            {body}\n\n        </Table>)\n}\n\nconst onClickTableHeader = (onSortData, h) => {\n    onSortData(h);\n\n}\n\n\nconst createHeader = (onSortData) => {\n    let header = [];\n    header.push(\n        <th>#</th>\n    )\n    headerText.forEach(h => {\n        header.push(\n            <th onClick={() => onClickTableHeader(onSortData, h)}>{h}</th>\n        )\n    })\n    return (\n        <tr>\n            {header}\n        </tr>\n    )\n}\n\nconst createBody = (onMoreClicked) => {\n    let rows = [];\n    let count = 1;\n    data.forEach(currentData => {\n        let rowElements = []\n        rowElements.push(\n            <td>{count}</td>\n        )\n        count++;\n        keys.forEach(k => {\n            if ((k === \"calibration_frequency\") && (currentData[k] == 0)) {\n                rowElements.push(\n                    <td>N/A</td>)\n            } else {\n            rowElements.push(\n                <td>{currentData[k]}</td>\n            )\n            }\n\n        })\n        rowElements.push(\n            <td><Button onClick={onMoreClicked} value={currentData.pk}>More</Button></td>\n        )\n        let currentRow = (\n            <tr>\n                {rowElements}\n            </tr>\n        )\n        rows.push(currentRow);\n    })\n    return (\n        <tbody>\n            {rows}\n        </tbody>\n    );\n}\n\nexport default modelTable;","/home/vcm/evo1/ece458/frontend/src/api/instrumentServices.js",["149","150","151"],"import instrumentData from './instrumentData.json';\n\nconst API_URL = 'http://localhost:8000';\n\nexport default class InstrumentServices {\n    constructor() { }\n\n    async getInstruments() {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n        }\n\n        const url = `${API_URL}/api/instruments/`;\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        })\n            .then(res => res.json())\n            .then(\n                (json) => {\n                    if (json.detail === 'Signature has expired.') {\n                        console.log(\"GET NEW TOKEN\")\n                        result.success = false;\n                    }\n                    result.data = json.data\n                    return result\n                },\n                (error) => {\n                    console.log(error)\n                    result.success = false;\n                    return result\n                }\n            )\n    }\n\n    async getInstrument(instrumentPk) {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n        }\n\n        return fetch(`${API_URL}/api/instruments/${instrumentPk}/`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        })\n            .then(res => res.json())\n            .then(\n                (json) => {\n                    if (json.detail === 'Signature has expired.') {\n                        console.log(\"GET NEW TOKEN\")\n                        result.success = false;\n                    }\n                    result.data = json\n                    return result\n                },\n                (error) => {\n                    console.log(error);\n                    result.success = false;\n                    return result;\n                }\n            )\n    }\n\n    async instrumentFilterSearch(filters) {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n        }\n\n        let url = `${API_URL}/api/instrument_search/?`;\n        let count = 0;\n        for (var key in filters) {\n            if (count > 0) {\n                url += '&';\n            }\n            url += (key + `=${filters[key]}`);\n            count++;\n        }\n\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        })\n            .then(res => res.json())\n            .then(\n                (json) => {\n                    if (json.detail === 'Signature has expired.') {\n                        console.log(\"GET NEW TOKEN\")\n                        result.success = false;\n                    }\n                    result.data = json\n                    return result\n                },\n                (error) => {\n                    console.log(error);\n                    result.success = false;\n                    return result;\n                }\n            )\n    }\n\n    // Error handling in place for bad input\n    async addInstrument(model_pk, serial_number, comment) {\n        let data = {\n            item_model: model_pk,\n            serial_number: serial_number,\n            comment: comment\n        }\n\n        let result = {\n            success: true,\n            errors: {}\n        }\n        const token = localStorage.getItem('token');\n\n        return fetch(`${API_URL}/api/instruments/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => {\n                if (res.ok) {\n                    return result;\n                } else {\n                    return res.json().then(json => {\n                        result.success = false;\n                        result.errors = json;\n                        return result;\n                    })\n                }\n            })\n    }\n\n    async editInstrument(instrumentPk, model_pk, serial_number, comment) {\n        let data = {\n            item_model: model_pk,\n            serial_number: serial_number,\n            comment: comment\n        }\n        const token = localStorage.getItem('token');\n\n        return fetch(`${API_URL}/api/instruments/${instrumentPk}/`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => res.json())\n            .then(json => {\n                console.log(json)\n                console.log(\"success\")\n            })\n    }\n\n    async deleteInstrument(instrumentPk) {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: []\n        }\n\n        return fetch(`${API_URL}/api/instruments/${instrumentPk}/`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        })\n    }\n\n\n    // Note: the date needs to be a string\n    // Error handling in place for future dates\n    async addCalibrationEvent(instrument_pk, date, comment) {\n        let data = {\n            instrument: instrument_pk,\n            date: date,\n            comment: comment\n        }\n\n        let result = {\n            success: true,\n            errors: []\n        }\n\n        const token = localStorage.getItem('token');\n\n        return fetch(`${API_URL}/api/calibration_events/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => {\n                if (res.ok) {\n                    return result;\n                } else {\n                    return res.json().then(json => {\n                        result.success = false;\n                        result.errors = json;\n                        console.log(result.errors)\n                        return result;\n                    })\n                }\n            })\n    }\n\n    async getSortedInstruments(sortingKey) {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n        }\n\n        const url = `${API_URL}/api/instrument_search/?sort_by=${sortingKey}`;\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                Authorization: `JWT ${token}`\n            }\n        })\n            .then(res => res.json())\n            .then(\n                (json) => {\n                    if (json.detail === 'Signature has expired.') {\n                        console.log(\"GET NEW TOKEN\")\n                        result.success = false;\n                    }\n                    result.data = json.data\n                    return result\n                },\n                (error) => {\n                    console.log(error)\n                    result.success = false;\n                    return result\n                }\n            )\n    }\n\n\n}\n\n","/home/vcm/evo1/ece458/frontend/src/components/instrument/InstrumentFilterBar.js",[],"/home/vcm/evo1/ece458/frontend/src/components/instrument/InstrumentTable.js",["152"],"import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\n\nconst keys = [\"vendor\", \"model number\", \"serial\", \"short description\", \"most recent callibration date\"];\nconst headerTextArr = [\"Vendor\", \"Model\", \"Serial\", \"Description\", \"Latest Callibration\", \"Callibration Expiration\", \"More\", \"Callibration Certificate\"];\n\n//Props\nlet data;   //prop array of data to display\n//'onDetailRequested': function passed in prop that will be called on a more details button click\n//'onCertificateRequested': function passed in prop that will be called on certificate button clicked\n\nconst instrumentTable = (props) => {\n    data = props.data;\n    let header = createHeader(props.sortData);\n    let body = createBody(props.onDetailRequested, props.onCertificateRequested);\n\n    return (\n        <Table striped bordered hover>\n            <thead>\n                {header}\n            </thead>\n            {body}\n\n        </Table>)\n}\n\nconst createHeader = (onSortData) => {\n    let header = [];\n    header.push(\n        <th>#</th>\n    )\n    headerTextArr.forEach(h => {\n        header.push(\n            <th onClick={() => onSortData(h)}>{h}</th>\n        )\n    })\n    return (\n        <tr>\n            {header}\n        </tr>\n    )\n}\n\nconst createBody = (onDetailRequested, onCertificateRequested) => {\n    let rows = [];\n    let count = 1;\n    data.forEach(currentData => {\n        let rowElements = []\n        rowElements.push(\n            <td>{count}</td>\n        )\n        count++;\n        rowElements.push(<td>{currentData.item_model.vendor}</td>);\n        rowElements.push(<td>{currentData.item_model.model_number}</td>)\n        rowElements.push(<td>{currentData.serial_number}</td>)\n        rowElements.push(<td>{currentData.item_model.description}</td>)\n        rowElements.push(<td>FIGURE ME OUT</td>)\n\n        rowElements.push(\n            <td>TBD</td>\n        )\n        rowElements.push(\n            <td><Button value={currentData[\"pk\"]} onClick={onDetailRequested}>More</Button></td>\n        )\n        rowElements.push(\n            <td><Button value={currentData[\"pk\"]} onClick={onCertificateRequested}>Download</Button></td>\n        )\n        let currentRow = (\n            <tr>\n                {rowElements}\n            </tr>\n        )\n        rows.push(currentRow);\n    })\n    return (\n        <tbody>\n            {rows}\n        </tbody>\n    );\n}\n\ninstrumentTable.defaultProps = {\n    data: []\n}\n\nexport default instrumentTable;","/home/vcm/evo1/ece458/frontend/src/components/generic/GenericTable.js",[],"/home/vcm/evo1/ece458/frontend/src/components/generic/Util.js",[],"/home/vcm/evo1/ece458/frontend/src/api/modelServices.js",["153"],"import modelData from './modelData.json';\n\nconst API_URL = 'http://localhost:8000';\n\nexport default class ModelServices {\n\n    // catches if the token is modified, good for error catching\n    async getModels() {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n        }\n\n        const url = `${API_URL}/api/models/`;\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        }).then(res => {\n            if (res.ok) {\n                return res.json().then(json => {\n                    result.data = json.data;\n                    return result;\n                });\n            } else {\n                return res.json().then(json => {\n                    if (json.detail === 'Signature has expired.') {\n                        window.location.reload();\n                        result.success = false;\n                        return result;\n                    }\n                    if (json.detail === 'Error decoding signature.') {\n                        window.location.reload();\n                        result.success = false;\n                        return result;\n                    }\n                    result.success = false;\n                    result.errors = json;\n                    return result;\n                })\n            }\n        }\n        )\n    }\n\n    // Catches errors from the backend and has \n    // appropriate error handling if the token gets bad\n    async addModel(vendor, modelNumber, description, comment, calFrequency) {\n        const token = localStorage.getItem('token');\n\n        let data = {\n            vendor: vendor,\n            model_number: modelNumber,\n            description: description,\n            comment: comment,\n            calibration_frequency: calFrequency\n        }\n\n        let result = {\n            success: true,\n            errors: []\n        }\n\n        return fetch(`${API_URL}/api/models/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => {\n                if (res.ok) {\n                    return result;\n                } else {\n                    return res.json().then(json => {\n                        if (json.detail === 'Signature has expired.') {\n                            window.location.reload();\n                            result.success = false;\n                        }\n                        if (json.detail === 'Error decoding signature.') {\n                            window.location.reload();\n                            result.success = false;\n                        }\n                        result.success = false;\n                        result.errors = json;\n                        return result;\n                    })\n                }\n            })\n    }\n\n\n    // Catches errors from the backend and has \n\n    async editModel(pk, vendor, modelNumber, description, comment, calFrequency) {\n        const token = localStorage.getItem('token');\n\n        let data = {\n            vendor: vendor,\n            model_number: modelNumber,\n            description: description,\n            comment: comment,\n            calibration_frequency: calFrequency\n        }\n\n        let result = {\n            success: true,\n            errors: []\n        }\n\n        return fetch(`${API_URL}/api/models/${pk}/`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => {\n                if (res.ok) {\n                    return result;\n                } else {\n                    return res.json().then(json => {\n                        if (json.detail === 'Signature has expired.') {\n                            window.location.reload();\n                            result.success = false;\n                        }\n                        if (json.detail === 'Error decoding signature.') {\n                            window.location.reload();\n                            result.success = false;\n                        }\n                        result.success = false;\n                        result.errors = json;\n                        return result;\n                    })\n                }\n            })\n    }\n\n    // handling bad auth token\n    async getModel(pk) {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n        }\n\n        return fetch(`${API_URL}/api/models/${pk}/`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json().then(json => {\n                        result.data = json;\n                        return result;\n                    });\n                } else {\n                    return res.json().then(json => {\n                        if (json.detail === 'Signature has expired.') {\n                            window.location.reload();\n                            result.success = false;\n                        }\n                        if (json.detail === 'Error decoding signature.') {\n                            window.location.reload();\n                            result.success = false;\n                        }\n                        result.success = false;\n                        result.errors = json;\n                        return result;\n                    })\n                }\n            })\n    }\n\n    async deleteModel(pk) {\n        const token = localStorage.getItem('token');\n        let result = {\n            success: true,\n            errors: [],\n        }\n\n        return fetch(`${API_URL}/api/models/${pk}/`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        }).then(res => {\n            if (res.ok) {\n                return result;\n            } else {\n                return res.json().then(json => {\n                    if (json.detail === 'Signature has expired.') {\n                        window.location.reload();\n                        result.success = false;\n                    }\n                    if (json.detail === 'Error decoding signature.') {\n                        window.location.reload();\n                        result.success = false;\n                    }\n                    result.success = false;\n                    result.errors = json;\n                    return result;\n                })\n            }\n        })\n\n    }\n\n    // handles bad token\n    async modelFilterSearch(filters) {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n        }\n\n        let url = `${API_URL}/api/model_search/?`;\n        let count = 0;\n        for (var key in filters) {\n            if (count > 0) {\n                url += '&';\n            }\n            url += (key + `=${filters[key]}`);\n            count++;\n        }\n        console.log(url)\n\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        }).then(res => {\n            if (res.ok) {\n                return result;\n            } else {\n                return res.json().then(json => {\n                    if (json.detail === 'Signature has expired.') {\n                        window.location.reload();\n                        result.success = false;\n                    }\n                    if (json.detail === 'Error decoding signature.') {\n                        window.location.reload();\n                        result.success = false;\n                    }\n                    result.success = false;\n                    result.errors = json;\n                    return result;\n                })\n            }\n        })\n    }\n\n    // has handling if the token is modified/expired\n    async getVendors() {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n            errors: []\n        }\n\n        let url = `${API_URL}/api/vendors/`;\n\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json().then(json => {\n                        result.data = json;\n                        return result;\n                    });\n                } else {\n                    return res.json().then(json => {\n                        if (json.detail === 'Signature has expired.') {\n                            window.location.reload();\n                            result.success = false;\n                            return result;\n                        }\n                        if (json.detail === 'Error decoding signature.') {\n                            window.location.reload();\n                            result.success = false;\n                            return result;\n                        }\n                        result.success = false;\n                        result.errors = json;\n                        return result;\n                    })\n                }\n            })\n    }\n\n       // has handling if the token is modified/expired\n    async getModelByVendor(vendor) {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n        }\n\n        let url = `${API_URL}/api/models_by_vendor/${vendor}/`;\n\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json().then(json => {\n                        result.data = json;\n                        return result;\n                    });\n                } else {\n                    return res.json().then(json => {\n                        if (json.detail === 'Signature has expired.') {\n                            window.location.reload();\n                            result.success = false;\n                            return result;\n                        }\n                        if (json.detail === 'Error decoding signature.') {\n                            window.location.reload();\n                            result.success = false;\n                            return result;\n                        }\n                        result.success = false;\n                        result.errors = json;\n                        return result;\n                    })\n                }\n            })\n    }\n\n\n       // has handling if the token is modified/expired\n    async getSortedModels(sortingKey) {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n        }\n\n        const url = `${API_URL}/api/model_search/?sort_by=${sortingKey}`;\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                Authorization: `JWT ${token}`\n            }\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json().then(json => {\n                        result.data = json.data;\n                        return result;\n                    });\n                } else {\n                    return res.json().then(json => {\n                        if (json.detail === 'Signature has expired.') {\n                            window.location.reload();\n                            result.success = false;\n                            return result;\n                        }\n                        if (json.detail === 'Error decoding signature.') {\n                            window.location.reload();\n                            result.success = false;\n                            return result;\n                        }\n                        result.success = false;\n                        result.errors = json;\n                        return result;\n                    })\n                }\n            })\n    }\n}\n\n","/home/vcm/evo1/ece458/frontend/src/components/generic/GenericPopup.js",[],"/home/vcm/evo1/ece458/frontend/src/components/instrument/AddInstrumentPopup.js",[],["154","155"],"/home/vcm/evo1/ece458/frontend/src/components/instrument/AddCalibrationPopup.js",[],{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":4,"column":25,"nodeType":"162","messageId":"163","endLine":4,"endColumn":30},{"ruleId":"160","severity":1,"message":"164","line":5,"column":10,"nodeType":"162","messageId":"163","endLine":5,"endColumn":18},{"ruleId":"160","severity":1,"message":"165","line":6,"column":7,"nodeType":"162","messageId":"163","endLine":6,"endColumn":19},{"ruleId":"166","severity":1,"message":"167","line":5,"column":3,"nodeType":"168","messageId":"169","endLine":5,"endColumn":20},{"ruleId":"160","severity":1,"message":"170","line":1,"column":17,"nodeType":"162","messageId":"163","endLine":1,"endColumn":26},{"ruleId":"160","severity":1,"message":"171","line":20,"column":7,"nodeType":"162","messageId":"163","endLine":20,"endColumn":25},{"ruleId":"160","severity":1,"message":"172","line":21,"column":5,"nodeType":"162","messageId":"163","endLine":21,"endColumn":19},{"ruleId":"160","severity":1,"message":"173","line":22,"column":5,"nodeType":"162","messageId":"163","endLine":22,"endColumn":12},{"ruleId":"166","severity":1,"message":"167","line":5,"column":5,"nodeType":"168","messageId":"169","endLine":5,"endColumn":22},{"ruleId":"174","severity":1,"message":"175","line":61,"column":68,"nodeType":"176","messageId":"177","endLine":61,"endColumn":70},{"ruleId":"160","severity":1,"message":"178","line":1,"column":8,"nodeType":"162","messageId":"163","endLine":1,"endColumn":22},{"ruleId":"166","severity":1,"message":"167","line":6,"column":5,"nodeType":"168","messageId":"169","endLine":6,"endColumn":22},{"ruleId":"160","severity":1,"message":"179","line":179,"column":13,"nodeType":"162","messageId":"163","endLine":179,"endColumn":19},{"ruleId":"160","severity":1,"message":"180","line":5,"column":7,"nodeType":"162","messageId":"163","endLine":5,"endColumn":11},{"ruleId":"160","severity":1,"message":"181","line":1,"column":8,"nodeType":"162","messageId":"163","endLine":1,"endColumn":17},{"ruleId":"156","replacedBy":"182"},{"ruleId":"158","replacedBy":"183"},"no-native-reassign",["184"],"no-negated-in-lhs",["185"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'authServices' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Component' is defined but never used.","'instrumentServices' is assigned a value but never used.","'instrumentData' is assigned a value but never used.","'history' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'instrumentData' is defined but never used.","'result' is assigned a value but never used.","'keys' is assigned a value but never used.","'modelData' is defined but never used.",["184"],["185"],"no-global-assign","no-unsafe-negation"]