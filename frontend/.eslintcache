[{"/home/vcm/evo1/ece458/frontend/src/index.js":"1","/home/vcm/evo1/ece458/frontend/src/reportWebVitals.js":"2","/home/vcm/evo1/ece458/frontend/src/App.js":"3","/home/vcm/evo1/ece458/frontend/src/components/Navigation.js":"4","/home/vcm/evo1/ece458/frontend/src/components/ProtectedRoute.js":"5","/home/vcm/evo1/ece458/frontend/src/components/AdminRoute.js":"6","/home/vcm/evo1/ece458/frontend/src/components/login/LoginPage.js":"7","/home/vcm/evo1/ece458/frontend/src/api/authServices.js":"8","/home/vcm/evo1/ece458/frontend/src/components/admin/AdminPage.js":"9","/home/vcm/evo1/ece458/frontend/src/components/user/UserProfilePage.js":"10","/home/vcm/evo1/ece458/frontend/src/components/import/ImportPage.js":"11","/home/vcm/evo1/ece458/frontend/src/components/model/ModelTablePage.js":"12","/home/vcm/evo1/ece458/frontend/src/components/model/ModelDetailView.js":"13","/home/vcm/evo1/ece458/frontend/src/components/instrument/InstrumentTablePage.js":"14","/home/vcm/evo1/ece458/frontend/src/components/instrument/InstrumentDetailView.js":"15","/home/vcm/evo1/ece458/frontend/src/components/user/EditUserPopup.js":"16","/home/vcm/evo1/ece458/frontend/src/api/config.js":"17","/home/vcm/evo1/ece458/frontend/src/api/instrumentServices.js":"18","/home/vcm/evo1/ece458/frontend/src/api/modelServices.js":"19","/home/vcm/evo1/ece458/frontend/src/api/userServices.js":"20","/home/vcm/evo1/ece458/frontend/src/components/generic/GenericTable.js":"21","/home/vcm/evo1/ece458/frontend/src/components/generic/Util.js":"22","/home/vcm/evo1/ece458/frontend/src/components/admin/AddUserPopup.js":"23","/home/vcm/evo1/ece458/frontend/src/components/import/ImportPagePopup.js":"24","/home/vcm/evo1/ece458/frontend/src/components/model/ModelFilterBar.js":"25","/home/vcm/evo1/ece458/frontend/src/components/model/ModelTable.js":"26","/home/vcm/evo1/ece458/frontend/src/components/generic/GenericPagination.js":"27","/home/vcm/evo1/ece458/frontend/src/components/generic/GenericPopup.js":"28","/home/vcm/evo1/ece458/frontend/src/components/instrument/CalStatusKey.js":"29","/home/vcm/evo1/ece458/frontend/src/components/instrument/InstrumentFilterBar.js":"30","/home/vcm/evo1/ece458/frontend/src/components/instrument/InstrumentTable.js":"31","/home/vcm/evo1/ece458/frontend/src/components/instrument/AddCalibrationPopup.js":"32","/home/vcm/evo1/ece458/frontend/src/components/model/AddModelPopup.js":"33","/home/vcm/evo1/ece458/frontend/src/components/instrument/AddInstrumentPopup.js":"34","/home/vcm/evo1/ece458/frontend/src/components/import/ImportInstructions.js":"35","/home/vcm/evo1/ece458/frontend/src/components/import/ImportModelTable.js":"36","/home/vcm/evo1/ece458/frontend/src/components/import/ImportInstrumentTable.js":"37"},{"size":547,"mtime":1613096968310,"results":"38","hashOfConfig":"39"},{"size":362,"mtime":1613060796389,"results":"40","hashOfConfig":"39"},{"size":3945,"mtime":1613412013320,"results":"41","hashOfConfig":"39"},{"size":1167,"mtime":1613412258052,"results":"42","hashOfConfig":"39"},{"size":622,"mtime":1613096968310,"results":"43","hashOfConfig":"39"},{"size":480,"mtime":1613096968310,"results":"44","hashOfConfig":"39"},{"size":1786,"mtime":1613096968310,"results":"45","hashOfConfig":"39"},{"size":1372,"mtime":1613345395533,"results":"46","hashOfConfig":"39"},{"size":6036,"mtime":1613444238743,"results":"47","hashOfConfig":"39"},{"size":5239,"mtime":1613449794466,"results":"48","hashOfConfig":"39"},{"size":7744,"mtime":1613411198159,"results":"49","hashOfConfig":"39"},{"size":10994,"mtime":1613444238747,"results":"50","hashOfConfig":"39"},{"size":10055,"mtime":1613411198171,"results":"51","hashOfConfig":"39"},{"size":12597,"mtime":1613444238747,"results":"52","hashOfConfig":"39"},{"size":16852,"mtime":1613444238747,"results":"53","hashOfConfig":"39"},{"size":2480,"mtime":1613446206570,"results":"54","hashOfConfig":"39"},{"size":116,"mtime":1613444529991,"results":"55","hashOfConfig":"39"},{"size":15291,"mtime":1613444238743,"results":"56","hashOfConfig":"39"},{"size":16359,"mtime":1613444238743,"results":"57","hashOfConfig":"39"},{"size":4922,"mtime":1613449794466,"results":"58","hashOfConfig":"39"},{"size":3068,"mtime":1613444238743,"results":"59","hashOfConfig":"39"},{"size":1700,"mtime":1613444238747,"results":"60","hashOfConfig":"39"},{"size":2767,"mtime":1613447330467,"results":"61","hashOfConfig":"39"},{"size":892,"mtime":1613444238747,"results":"62","hashOfConfig":"39"},{"size":2330,"mtime":1613096968310,"results":"63","hashOfConfig":"39"},{"size":2630,"mtime":1613444238747,"results":"64","hashOfConfig":"39"},{"size":1851,"mtime":1613444238743,"results":"65","hashOfConfig":"39"},{"size":3068,"mtime":1613345395557,"results":"66","hashOfConfig":"39"},{"size":1637,"mtime":1613444238747,"results":"67","hashOfConfig":"39"},{"size":2786,"mtime":1613096968310,"results":"68","hashOfConfig":"39"},{"size":4904,"mtime":1613444238747,"results":"69","hashOfConfig":"39"},{"size":2230,"mtime":1613345395817,"results":"70","hashOfConfig":"39"},{"size":8228,"mtime":1613345395821,"results":"71","hashOfConfig":"39"},{"size":8552,"mtime":1613345395817,"results":"72","hashOfConfig":"39"},{"size":2128,"mtime":1613444238747,"results":"73","hashOfConfig":"39"},{"size":2478,"mtime":1613444238747,"results":"74","hashOfConfig":"39"},{"size":2483,"mtime":1613444238747,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"nq14u3",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"78"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"78"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"78"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"78"},"/home/vcm/evo1/ece458/frontend/src/index.js",[],["160","161"],"/home/vcm/evo1/ece458/frontend/src/reportWebVitals.js",[],"/home/vcm/evo1/ece458/frontend/src/App.js",["162"],"import './App.css';\n\nimport React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\n\nimport LoginPage from './components/login/LoginPage';\nimport AdminPage from './components/admin/AdminPage';\nimport UserProfilePage from './components/user/UserProfilePage';\nimport ImportPage from './components/import/ImportPage';\nimport ModelTablePage from './components/model/ModelTablePage';\nimport ModelDetailPage from './components/model/ModelDetailView';\nimport InstrumentTablePage from './components/instrument/InstrumentTablePage';\nimport InstrumentDetailView from './components/instrument/InstrumentDetailView';\nimport Navigation from './components/Navigation';\nimport ProtectedRoute from './components/ProtectedRoute';\nimport AdminRoute from './components/AdminRoute';\n\nimport AuthServices from './api/authServices';\nconst authServices = new AuthServices();\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      logged_in: localStorage.getItem('token') ? true : false,\n      username: '',\n      error_message: '',\n      admin: false,\n      redirect: null\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.logged_in) {\n      authServices.getCurrentUser().then((result) => {\n        if (result.success) {\n          this.setState({ \n            username: result.data.username,\n            admin: result.data.is_staff,\n          })\n        } else {\n          localStorage.removeItem('token');\n          this.setState({\n            logged_in: false,\n            username: '',\n            admin: false\n          });\n        }\n    }\n    )\n    }\n    else {\n      console.log(\"Not Logged in\")\n    }\n  }\n\n  handle_login = (e, data) => {\n    if (data.username === \"\" || data.password === \"\") {\n      this.setState({ error_message: 'Please complete all fields' });\n    }\n    else {\n      e.preventDefault();\n      authServices.login(data)\n        .then(res => res.json())\n        .then(json => {\n          if (typeof json.user === 'undefined') {\n            this.setState({ error_message: 'Incorrect Login Credentials' });\n          }\n          else {\n            localStorage.setItem('token', json.token);\n            this.setState({\n              logged_in: true,\n              username: json.user.username,\n              admin: json.user.is_staff,\n              redirect: true\n            });\n            this.setState({ error_message: '' });\n          }\n        });\n    }\n  };\n\n\n  handle_logout = () => {\n    localStorage.removeItem('token');\n    this.setState({ \n      logged_in: false, \n      username: '',\n      admin: false,\n      redirect: false\n   });\n  };\n\n\n\n  render(\n    form = <LoginPage handle_login={this.handle_login} error_message={this.state.error_message} isLoggedIn={this.state.logged_in}/>,\n  ) {\n    return (\n      <BrowserRouter>\n        <div>\n          <Navigation logged_in={this.state.logged_in} handle_logout={this.handle_logout} is_admin={this.state.admin}/>\n          <Switch>\n            <ProtectedRoute path=\"/models\" component={ModelTablePage} is_admin={this.state.admin} exact />\n            <ProtectedRoute path=\"/models/:pk\" component={ModelDetailPage} is_admin={this.state.admin} exact />\n            <ProtectedRoute path=\"/instruments\" component={InstrumentTablePage} is_admin={this.state.admin} exact />\n            <ProtectedRoute path=\"/instruments/:pk\" component={InstrumentDetailView} is_admin={this.state.admin} exact />\n            <AdminRoute is_admin={this.state.admin} path=\"/import\" component={ImportPage} exact />\n            <ProtectedRoute path=\"/user-profile\" component={UserProfilePage} exact />\n            <AdminRoute is_admin={this.state.admin} path=\"/admin\" component={AdminPage} exact />\n          </Switch>\n          {this.state.logged_in ? null : form}\n          {this.state.redirect ? (<Redirect to=\"/user-profile\"/>) : null}\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","/home/vcm/evo1/ece458/frontend/src/components/Navigation.js",[],"/home/vcm/evo1/ece458/frontend/src/components/ProtectedRoute.js",[],"/home/vcm/evo1/ece458/frontend/src/components/AdminRoute.js",[],"/home/vcm/evo1/ece458/frontend/src/components/login/LoginPage.js",["163","164"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport \"./Login.css\";\nimport AuthServices from '../../api/authServices';\nimport { Redirect } from \"react-router-dom\";\nconst authServices = new AuthServices();\n\nclass login extends React.Component {\n    state = {\n        username: '',\n        password: '',\n        redirect: null\n    };\n\n    async componentDidMount() {\n        this.setState({\n            redirect: null\n        })\n    }\n\n    handle_change = e => {\n        const name = e.target.name;\n        const value = e.target.value;\n        this.setState(prevstate => {\n            const newState = { ...prevstate };\n            newState[name] = value;\n            return newState;\n        });\n    };\n\n    render() {\n        return (\n            <div style={{textAlign: \"center\"}}>\n            <form className=\"login\" onSubmit={e => this.props.handle_login(e, this.state)}>\n                <h2>Log In</h2>\n                <label htmlFor=\"username\">Username</label>\n                <input\n                    type=\"text\"\n                    name=\"username\"\n                    value={this.state.username}\n                    onChange={this.handle_change}\n                />\n                <label htmlFor=\"password\">Password</label>\n                <input\n                    type=\"password\"\n                    name=\"password\"\n                    value={this.state.password}\n                    onChange={this.handle_change}\n                />\n                <input type=\"submit\" />\n                <h5>{this.props.error_message}</h5>\n            </form>\n            </div>\n        );\n    }\n}\n\nexport default login;\n\nlogin.propTypes = {\n    handle_login: PropTypes.func.isRequired,\n    error_message: PropTypes.string.isRequired,\n    isLoggedIn: PropTypes.bool\n  };\n","/home/vcm/evo1/ece458/frontend/src/api/authServices.js",["165"],"import Configs from './config.js';\nconst API_URL = Configs\n\n\nexport default class AuthServices {\n  constructor() { }\n\n  async login(data) {\n\n    const url = `${API_URL}/api/token_auth/`;\n\n    return fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n  }\n\n  // handles modified/expired token\n  async getCurrentUser() {\n    const token = localStorage.getItem('token');\n\n    let result = {\n      success: true,\n      data: [],\n    }\n\n    const url = `${API_URL}/api/current_user/`;\n\n    return fetch(url, {\n      headers: {\n        Authorization: `JWT ${token}`\n      }\n    })\n      .then(res => {\n        if (res.ok) {\n          return res.json().then(json => {\n            result.data = json;\n            return result;\n          });\n        } else {\n          return res.json().then(json => {\n          if (json.detail === 'Signature has expired.') {\n            window.location.reload();\n            result.success = false;\n            return result;\n          }\n            if (json.detail === 'Error decoding signature.') {\n              window.location.reload();\n            result.success = false;\n              return result;\n            }\n          result.success = false;\n            result.errors = json;\n            return result;\n          })\n      }\n      })\n    }\n}","/home/vcm/evo1/ece458/frontend/src/components/admin/AdminPage.js",[],"/home/vcm/evo1/ece458/frontend/src/components/user/UserProfilePage.js",[],"/home/vcm/evo1/ece458/frontend/src/components/import/ImportPage.js",[],"/home/vcm/evo1/ece458/frontend/src/components/model/ModelTablePage.js",[],"/home/vcm/evo1/ece458/frontend/src/components/model/ModelDetailView.js",["166","167","168","169","170"],"import React, { Component } from 'react';\nimport EditModelPopup from './AddModelPopup';\nimport DeletePopup from '../generic/GenericPopup';\nimport Table from 'react-bootstrap/Table';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { Redirect } from \"react-router-dom\";\nimport { withRouter } from 'react-router';\nimport '../generic/General.css';\nimport logo from '../../assets/HPT_logo_crop.png';\nimport PropTypes from 'prop-types';\n\nimport ModelServices from \"../../api/modelServices\";\nimport InstrumentServices from '../../api/instrumentServices';\nimport { rawErrorsToDisplayed } from '../generic/Util';\nimport ErrorFile from '../../api/ErrorMapping/ModelErrors.json';\n\nconst modelServices = new ModelServices();\nconst instrumentServices = new InstrumentServices();\nlet instrumentData = [];\nlet history;\n\n\nclass ModelDetailView extends React.Component {\n    constructor(props) {\n        super(props);\n        const arr = props.location.pathname.split('/')\n\n        this.state = {\n            redirect: null,\n            model_info: {\n                pk: arr[arr.length - 1],\n                vendor: '',\n                model_number: '',\n                description: '',\n                comment: '',\n                calibration_frequency: '',\n                instruments: []\n            },\n            editPopup: {\n                isShown: false,\n                errors: []\n            },\n            deletePopup: {\n                isShown: false,\n                errors: []\n            }\n\n        }\n\n        this.onMoreClicked = this.onMoreClicked.bind(this);\n        this.onEditClicked = this.onEditClicked.bind(this);\n        this.onEditSubmit = this.onEditSubmit.bind(this);\n        this.onEditClose = this.onEditClose.bind(this);\n        this.onDeleteClicked = this.onDeleteClicked.bind(this);\n        this.onDeleteSubmit = this.onDeleteSubmit.bind(this);\n        this.onDeleteClose = this.onDeleteClose.bind(this);\n    }\n\n    async componentDidMount() {\n        await this.updateInfo();\n    }\n\n    render(\n        adminButtons = <div>\n            <Button onClick={this.onEditClicked}>Edit Model</Button>\n            <Button onClick={this.onDeleteClicked}>Delete Model</Button>\n        </div>\n    ) {\n        let deletePopup = (this.state.deletePopup.isShown) ? this.makeDeletePopup() : null;\n        let editPopup = (this.state.editPopup.isShown) ? this.makeEditPopup() : null;\n\n        if (this.state.redirect != null) {\n            return <Redirect to={this.state.redirect} />\n        }\n        return (\n            <div>\n                {deletePopup}\n                {editPopup}\n            <div className=\"background\">\n                <div className=\"row mainContent\">\n                        <div className=\"col-2 text-center button-col\">\n                            <img src={logo} alt=\"Logo\" />\n                            {this.props.is_admin ? adminButtons : null}\n                        </div>\n                        <div className=\"col-10\">\n                            <h2>{`Model: ${this.state.model_info.model_number}`}</h2>\n                            <Row>\n                                <Col>{this.makeDetailsTable()}</Col>\n                                <Col xs={6}>\n                                    {this.makeInstrumentsTable()}\n                                </Col>\n                            </Row>\n                        </div>\n                    </div>\n                </div>\n            </div >\n        );\n    }\n\n    makeDeletePopup() {\n        let body = (\n            <p>Are you sure you want to delete Model: {this.state.model_info.model_number}?</p>\n        )\n        return (\n            <DeletePopup\n                show={this.state.deletePopup.isShown}\n                body={body}\n                headerText=\"Warning!\"\n                closeButtonText=\"Cancel\"\n                submitButtonText=\"Delete\"\n                onClose={this.onDeleteClose}\n                onSubmit={this.onDeleteSubmit}\n                submitButtonVariant=\"danger\"\n                errors={this.state.deletePopup.errors}\n            />\n        )\n    }\n\n    makeEditPopup() {\n        return (\n            <EditModelPopup\n                isShown={this.state.editPopup.isShown}\n                onSubmit={this.onEditSubmit}\n                onClose={this.onEditClose}\n                currentModel={this.state.model_info}\n                errors={this.state.editPopup.errors}\n            />\n        )\n    }\n\n    makeEditPopup() {\n        return (\n            <EditModelPopup\n                isShown={this.state.isEditShown}\n                onSubmit={this.onEditSubmit}\n                onClose={this.onEditClose}\n                currentModel={this.state.model_info}\n            />\n        )\n    }\n\n    makeDetailsTable() {\n        let modelInfo = this.state.model_info;\n        return (\n            <Table bordered hover>\n                <tbody>\n                    <tr>\n                        <td><strong>Vendor</strong></td>\n                        <td>{modelInfo.vendor}</td>\n                    </tr>\n                    <tr>\n                        <td><strong>Model</strong></td>\n                        <td>{modelInfo.model_number}</td>\n                    </tr>\n                    <tr>\n                        <td><strong>Description</strong></td>\n                        <td>{modelInfo.description}</td>\n                    </tr>\n                    <tr>\n                        <td><strong>Comment</strong></td>\n                        <td>{modelInfo.comment}</td>\n                    </tr>\n                    <tr>\n                        <td><strong>Calibration Frequency</strong></td>\n                        <td>{modelInfo.calibration_frequency}</td>\n                    </tr>\n                </tbody>\n            </Table>\n        )\n    }\n\n    makeInstrumentsTable() {\n        let rows = [];\n        let count = 1;\n        this.state.model_info.instruments.forEach((element) => {\n            let currentRow = [];\n            currentRow.push(\n                <td>{count}</td>\n            )\n            currentRow.push(\n                <td>{element[\"serial_number\"]}</td>\n            )\n            currentRow.push(\n                <td><Button onClick={this.onMoreClicked} value={element[\"pk\"]}>More</Button></td>\n            )\n            count++;\n            rows.push(\n                <tr>{currentRow}</tr>\n            )\n        });\n\n        return (\n            <div className=\"data-table\">\n            <Table bordered hover>\n                <thead>\n                    <tr>\n                        <th colSpan=\"3\" className=\"text-center\">Instances by Serial Number</th>\n                    </tr>\n                    <tr>\n                        <th>#</th>\n                        <th>Serial Number</th>\n                        <th>More</th>\n                    </tr>\n\n                </thead>\n                <tbody>\n                    {rows}\n                </tbody>\n            </Table>\n            </div>\n        )\n\n    }\n\n\n\n    onMoreClicked(e) {\n        this.setState({\n            redirect: `/instruments/${e.target.value}`\n        })\n    }\n\n    onEditClicked() {\n        this.setState({\n            editPopup: {\n                ...this.state.editPopup,\n                isShown: true\n            }\n        })\n    }\n\n    async onEditSubmit(editedModel) {\n        await modelServices.editModel(editedModel.pk, editedModel.vendor, editedModel.model_number, editedModel.description, editedModel.comment, editedModel.calibration_frequency).then(result => {\n            if (result.success) {\n                this.setState({\n                    deletePopup: {\n                        ...this.state.deletePopup,\n                        isShown: false\n                    }\n                })\n\n                this.updateInfo();\n                this.onEditClose();\n            } else {\n                let formattedErrors = rawErrorsToDisplayed(result.errors, ErrorFile[\"add__edit_model\"]);\n                this.setState({\n                    editPopup: {\n                        ...this.state.editPopup,\n                        errors: formattedErrors\n                    }\n                })\n            }\n        })\n\n    }\n\n    onEditClose() {\n        this.setState({\n            editPopup: {\n                ...this.state.editPopup,\n                isShown: false,\n                errors: []\n            }\n        })\n    }\n\n    onDeleteClicked() {\n        this.setState({\n            deletePopup: {\n                ...this.state.deletePopup,\n                isShown: true,\n            }\n        })\n    }\n\n    onDeleteClose() {\n        this.setState({\n            deletePopup: {\n                ...this.state.deletePopup,\n                errors: [],\n                isShown: false,\n            }\n        })\n    }\n\n    async onDeleteSubmit() {\n        await modelServices.deleteModel(this.state.model_info.pk).then(result => {\n            if (result.success) {\n                this.onDeleteClose();\n                this.setState({\n                    redirect: '/models/',\n                    deletePopup: {\n                        ...this.state.deletePopup,\n                        isShown: false\n                    }\n                })\n            } else {\n                let formattedErrors = rawErrorsToDisplayed(result.errors, ErrorFile[\"delete_model\"]);\n                this.setState({\n                    deletePopup: {\n                        ...this.state.deletePopup,\n                        errors: formattedErrors\n                    }\n                })\n            }\n        })\n    }\n\n    async updateInfo() {\n        await modelServices.getModel(this.state.model_info.pk).then((result) => {\n            if (result.success) {\n                this.setState({\n                    model_info: result.data\n                })\n            } else {\n                console.log(\"error\")\n            }\n        })\n    }\n}\nexport default withRouter(ModelDetailView);\n\nModelDetailView.propTypes = {\n    is_admin: PropTypes.bool.isRequired\n}","/home/vcm/evo1/ece458/frontend/src/components/instrument/InstrumentTablePage.js",[],"/home/vcm/evo1/ece458/frontend/src/components/instrument/InstrumentDetailView.js",["171"],"import React, { Component } from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport logo from '../../assets/HPT_logo_crop.png';\nimport { Redirect, withRouter } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\nimport AddCalibrationPopup from './AddCalibrationPopup';\nimport EditInstrumentPopop from './AddInstrumentPopup';\nimport DeletePopup from '../generic/GenericPopup';\nimport GenericTable from '../generic/GenericTable';\nimport GenericPagination from '../generic/GenericPagination';\nimport ErrorFile from \"../../api/ErrorMapping/InstrumentErrors.json\";\nimport { rawErrorsToDisplayed } from '../generic/Util';\n\nimport InstrumentServices from \"../../api/instrumentServices\";\n\nconst instrumentServices = new InstrumentServices();\n\nclass InstrumentDetailView extends Component {\n    constructor(props) {\n        super(props);\n        const arr = props.location.pathname.split('/')\n\n        this.state = {\n            redirect: null,\n            instrument_info: {\n                pk: arr[arr.length - 1],\n                model_number: '',\n                model_pk: '',\n                vendor: '',\n                serial_number: '',\n                comment: '',\n                calibration_frequency: '',\n                calibration_expiration: '',\n                calibration_history: [],\n            },\n            calibration_pagination: {\n                numResults: '',\n                numPages: '',\n                resultsPerPage: 10,\n                currentPageNum: 1,\n                numResults: '',\n                isShowAll: false,\n                desiredPage: 1\n            },\n            addCalPopup: {\n                isShown: false,\n                errors: [],\n            },\n            editInstrumentPopup: {\n                isShown: false,\n                errors: []\n            },\n            isDeleteShown: false,\n            currentUser: ''\n        }\n        this.onAddCalibrationClicked = this.onAddCalibrationClicked.bind(this);\n        this.onAddCalibrationSubmit = this.onAddCalibrationSubmit.bind(this);\n        this.onAddCalibrationClose = this.onAddCalibrationClose.bind(this);\n        this.onEditInstrumentClicked = this.onEditInstrumentClicked.bind(this);\n        this.onEditInstrumentSubmit = this.onEditInstrumentSubmit.bind(this);\n        this.onEditInstrumentClosed = this.onEditInstrumentClosed.bind(this);\n        this.onDeleteClicked = this.onDeleteClicked.bind(this);\n        this.onDeleteSubmit = this.onDeleteSubmit.bind(this);\n        this.onDeleteClose = this.onDeleteClose.bind(this);\n        this.onCertificateRequested = this.onCertificateRequested.bind(this);\n        this.onToggleShowAll = this.onToggleShowAll.bind(this);\n        this.onPaginationClick = this.onPaginationClick.bind(this);\n    }\n\n    async componentDidMount() {\n        await this.getInstrumentInfo();\n        await this.getCalHistory();\n    }\n\n    render(\n        adminButtons = <div>\n            <Button onClick={this.onEditInstrumentClicked}>Edit Instrument</Button>\n            <Button onClick={this.onDeleteClicked}>Delete Instrument</Button>\n        </div>\n    ) {\n        console.log(this.state.calibration_pagination)\n        let addCalibrationPopup = (this.state.addCalPopup.isShown) ? this.makeAddCalibrationPopup() : null;\n        let editInstrumentPopup = (this.state.editInstrumentPopup.isShown) ? this.makeEditInstrumentPopup() : null;\n        let deleteInstrumentPopup = (this.state.isDeleteShown) ? this.makeDeletePopup() : null;\n\n        let calibrationCol = (\n            <Col xs={7}>\n                {this.makeCalibrationTable()}\n                <GenericPagination\n                    currentPageNum={this.state.calibration_pagination.currentPageNum}\n                    numPages={this.state.calibration_pagination.numPages}\n                    numResults={this.state.calibration_pagination.numResults}\n                    resultsPerPage={this.state.calibration_pagination.resultsPerPage}\n                    onPageClicked={this.onPaginationClick}\n                    onShowAllToggle={this.onToggleShowAll}\n                    isShown={!this.state.calibration_pagination.isShowAll}\n                    buttonText={(this.state.calibration_pagination.isShowAll) ? \"Limit Results\" : \"Show All\"}\n\n                />\n            </Col>\n        )\n\n        let displayedCalibrationData = (this.state.instrument_info.calibration_frequency !== 0) ? calibrationCol : null;\n        if (this.state.redirect != null) {\n            return <Redirect to={this.state.redirect} />\n        }\n        return (\n            <div>\n                {addCalibrationPopup}\n                {editInstrumentPopup}\n                {deleteInstrumentPopup}\n                <div className=\"background\">\n                    <div className=\"row mainContent\">\n                        <div className=\"col-2 text-center button-col\">\n                            <img src={logo} alt=\"Logo\" />\n                            {this.props.is_admin ? adminButtons : null}\n                            <Button hidden={this.state.instrument_info.calibration_frequency === 0} onClick={this.onAddCalibrationClicked}>Add Calibration</Button>\n                            <Button onClick={this.onCertificateRequested} disabled={this.state.instrument_info.calibration_history.length === 0}>Download Certificate</Button>\n                        </div>\n                        <div className=\"col-10\">\n                            <h1>{`Instrument: ${this.state.instrument_info.serial_number}`}</h1>\n                            <Row>\n                                <Col>{this.makeDetailsTable()}</Col>\n                                {displayedCalibrationData}\n                            </Row>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n        );\n    }\n\n    async getInstrumentInfo() {\n        await instrumentServices.getInstrument(this.state.instrument_info.pk).then(\n            (result) => {\n                if (result.success) {\n                    let data = result.data;\n                    this.setState({\n                        ...this.state,\n                        instrument_info: {\n                            ...this.state.instrument_info,\n                            model_number: data.item_model.model_number,\n                            model_pk: data.item_model.pk,\n                            vendor: data.item_model.vendor,\n                            serial_number: data.serial_number,\n                            comment: data.comment,\n                            calibration_frequency: data.item_model.calibration_frequency,\n                            calibration_expiration: data.calibration_expiration\n\n                        }\n                    })\n                }\n\n            }\n        )\n    }\n\n    async getCalHistory() {\n        await instrumentServices.getCalFromInstrument(this.state.instrument_info.pk, this.state.calibration_pagination.desiredPage, this.state.calibration_pagination.isShowAll).then(\n            (result) => {\n                if (result.success) {\n                    console.log(result.data.count,)\n                    this.setState({\n                        instrument_info: {\n                            ...this.state.instrument_info,\n                            calibration_history: result.data.data\n                        }\n                    })\n                    if (!this.state.calibration_pagination.isShowAll) {\n                        this.setState({\n                            calibration_pagination: {\n                                ...this.state.calibration_pagination,\n                                numResults: result.data.count,\n                                numPages: result.data.numpages,\n                                resultsPerPage: 10,\n                                currentPageNum: result.data.currentpage,\n                            }\n                        });\n                    }\n                } else {\n                    console.log(\"failed to get cal history\");\n                }\n            }\n        )\n    }\n\n\n    makeDetailsTable() {\n        let detailData = this.state.instrument_info;\n\n        let calibrationData = (\n            <>\n                <tr>\n                    <td><strong>Next Calibration</strong></td>\n                    <td>{this.state.instrument_info.calibration_expiration}</td>\n                </tr>\n                <tr>\n                    <td><strong>Calibration Frequency</strong></td>\n                    <td>{`${this.state.instrument_info.calibration_frequency} Days`}</td>\n                </tr>\n            </>\n        )\n\n        let noCalibrationData = (\n            <tr>\n                <td><strong>Calibration</strong></td>\n                <td>This model isn't calibratable</td>\n            </tr>\n        )\n\n        let calibrationIncluded = (this.state.instrument_info.calibration_frequency !== 0) ? calibrationData : noCalibrationData;\n\n        return (\n            <Table bordered>\n                <thead className=\"text-center\">\n                    <th colSpan={2}>Instrument Information</th>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td><strong>Serial Number</strong></td>\n                        <td>{detailData.serial_number}</td>\n                    </tr>\n                    <tr>\n                        <td><strong>Model</strong></td>\n                        <td><a href={`/models/${this.state.instrument_info.model_pk}`}>{detailData.model_number}</a></td>\n                    </tr>\n                    <tr>\n                        <td><strong>Comment</strong></td>\n                        <td>{detailData.comment}</td>\n                    </tr>\n                    {calibrationIncluded}\n\n                </tbody>\n            </Table>\n        )\n    }\n\n    makeAddCalibrationPopup() {\n        return (\n            <AddCalibrationPopup\n                isShown={this.state.addCalPopup.isShown}\n                onClose={this.onAddCalibrationClose}\n                onSubmit={this.onAddCalibrationSubmit}\n                errors={this.state.addCalPopup.errors}\n            />\n        )\n    }\n\n\n    makeEditInstrumentPopup() {\n        let currentInstrument = {\n            model_pk: this.state.instrument_info.model_pk,\n            model_number: this.state.instrument_info.model_number,\n            vendor: this.state.instrument_info.vendor,\n            serial_number: this.state.instrument_info.serial_number,\n            comment: this.state.instrument_info.comment\n        }\n        return (\n            <EditInstrumentPopop\n                isShown={this.state.editInstrumentPopup.isShown}\n                onSubmit={this.onEditInstrumentSubmit}\n                onClose={this.onEditInstrumentClosed}\n                currentInstrument={currentInstrument}\n                errors={this.state.editInstrumentPopup.errors}\n            />\n        )\n    }\n\n    makeDeletePopup() {\n        let body = (\n            <p>Are you sure you want to delete Instrument: {this.state.instrument_info.serial_number}?</p>\n        )\n        return (\n            <DeletePopup\n                show={this.state.isDeleteShown}\n                body={body}\n                headerText=\"Warning!\"\n                closeButtonText=\"Cancel\"\n                submitButtonText=\"Delete\"\n                onClose={this.onDeleteClose}\n                onSubmit={this.onDeleteSubmit}\n                submitButtonVariant=\"danger\"\n            />\n        )\n    }\n\n    onAddCalibrationClicked() {\n        this.setState({\n            addCalPopup: {\n                ...this.state.addCalPopup,\n                isShown: true\n            }\n        })\n    }\n\n    async onAddCalibrationSubmit(calibrationEvent) {\n        await instrumentServices.addCalibrationEvent(this.state.instrument_info.pk, calibrationEvent.date, calibrationEvent.comment)\n            .then((result) => {\n                if (result.success) {\n                    this.getInstrumentInfo();\n                    this.getCalHistory();\n                    this.onAddCalibrationClose();\n                } else {\n                    let formattedErrors = rawErrorsToDisplayed(result.errors, ErrorFile[\"add_calibration\"]);\n                    console.log(formattedErrors);\n                    this.setState({\n                        addCalPopup: {\n                            ...this.state.addCalPopup,\n                            errors: formattedErrors\n                        }\n                    })\n                }\n            });\n\n    }\n\n    onAddCalibrationClose() {\n        this.setState({\n            addCalPopup: {\n                ...this.state.addCalPopup,\n                isShown: false,\n                errors: []\n            }\n        })\n    }\n\n    makeCalibrationTable() {\n        let formattedDataArr = [];\n        let data = this.state.instrument_info.calibration_history;\n        data.forEach((current) => {\n            let formattedData = {\n                date: current.date,\n                comment: current.comment,\n                name: `${current.user.first_name} ${current.user.last_name}`,\n                username: current.user.username\n            }\n            formattedDataArr.push(formattedData);\n        })\n        return (\n            <div className=\"data-table\">\n            <GenericTable\n                data={formattedDataArr}\n                keys={['$.date', '$.comment', '$.name', '$.username']}\n                headers={[\"Date\", \"Comment\", \"Name\", \"Username\"]}\n                buttonFunctions={[]}\n                buttonText={[]}\n                tableTitle=\"Calibration History\"\n                    countStart={(this.state.calibration_pagination.currentPageNum - 1) * this.state.calibration_pagination.resultsPerPage + 1}\n            />\n            </div>\n        )\n    }\n\n    onModelLinkClicked() {\n        this.setState({\n            redirect: `/models/${this.state.instrument_info.model_pk}`\n        })\n    }\n\n    onEditInstrumentClicked() {\n        this.setState({\n            editInstrumentPopup: {\n                ...this.state.editInstrumentPopup,\n                isShown: true\n            }\n        })\n    }\n\n    async onEditInstrumentSubmit(newInstrument) {\n        await instrumentServices.editInstrument(this.state.instrument_info.pk, newInstrument.model_pk, newInstrument.serial_number, newInstrument.comment)\n            .then((result) => {\n                if (result.success) {\n                    this.getInstrumentInfo();\n                    this.onEditInstrumentClosed();\n                } else {\n                    let formattedErrors = rawErrorsToDisplayed(result.errors, ErrorFile[\"add_edit_instrument\"]);\n                    this.setState({\n                        editInstrumentPopup: {\n                            ...this.state.editInstrumentPopup,\n                            errors: formattedErrors\n                        }\n                    })\n                }\n            });\n    }\n\n    onEditInstrumentClosed() {\n        this.setState({\n            editInstrumentPopup: {\n                ...this.state.editInstrumentPopup,\n                isShown: false,\n                errors: []\n            }\n        })\n    }\n\n    onDeleteClicked() {\n        this.setState({\n            isDeleteShown: true\n        })\n    }\n\n    onDeleteClose() {\n        this.setState({\n            isDeleteShown: false\n        })\n    }\n\n    async onDeleteSubmit() {\n        console.log(\"Deleting instrument\");\n        await instrumentServices.deleteInstrument(this.state.instrument_info.pk).then(result => {\n            this.onDeleteClose();\n            this.setState({\n                redirect: '/instruments/'\n            })\n        });\n    }\n\n    async onCertificateRequested(e) {\n        instrumentServices.getCalibrationPDF(this.state.instrument_info.pk)\n        .then(res => {\n            if(res.success)\n            {\n                window.open(res.url, '_blank')\n                URL.revokeObjectURL(res.url)\n            }\n        })\n    }\n\n    async onPaginationClick(num) {\n        this.setState({\n            calibration_pagination: {\n                ...this.state.calibration_pagination,\n                desiredPage: num\n            }\n        }, () => {\n                this.getCalHistory();\n        })\n    }\n\n    async onToggleShowAll() {\n        this.setState((prevState) => {\n            return {\n                calibration_pagination: {\n                    ...this.state.calibration_pagination,\n                    isShowAll: !prevState.calibration_pagination.isShowAll\n                }\n            }\n        }, () => {\n            this.getCalHistory();\n        })\n    }\n\n}\n\nexport default withRouter(InstrumentDetailView);\n\nInstrumentDetailView.propTypes = {\n    is_admin: PropTypes.bool.isRequired\n}","/home/vcm/evo1/ece458/frontend/src/components/user/EditUserPopup.js",[],"/home/vcm/evo1/ece458/frontend/src/api/config.js",[],"/home/vcm/evo1/ece458/frontend/src/api/instrumentServices.js",["172"],"import Configs from './config.js';\nconst API_URL = Configs\n\nexport default class InstrumentServices {\n    constructor() { }\n\n    // handled modified/expired tokens\n    async getInstruments(filters, sort_by, show_all, pageNum) {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n        }\n\n        let url = `${API_URL}/api/instrument_search/?`;\n        let count = 0;\n        for (var key in filters) {\n            if (count > 0) {\n                url += '&';\n            }\n            url += (key + `=${filters[key]}`);\n            count++;\n        }\n\n        if (sort_by !== '') {\n            url = `${url}&sort_by=${sort_by}`;\n        }\n\n        if (show_all) {\n            url = `${url}&get_all`\n        } else {\n            url = `${url}&page=${pageNum}`\n        }\n\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json().then(json => {\n                        result.data = json;\n                        return result;\n                    });\n                } else {\n                    return res.json().then(json => {\n                        if (json.detail === 'Signature has expired.') {\n                            window.location.reload();\n                            result.success = false;\n                            return result;\n                        }\n                        if (json.detail === 'Error decoding signature.') {\n                            window.location.reload();\n                            result.success = false;\n                            return result;\n                        }\n                        result.success = false;\n                        result.errors = json;\n                        return result;\n                    })\n                }\n            }\n            )\n    }\n\n    // handled modified/expired tokens\n    async getInstrument(instrumentPk) {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n        }\n\n        return fetch(`${API_URL}/api/instruments/${instrumentPk}/`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json().then(json => {\n                        result.data = json;\n                        return result;\n                    });\n                } else {\n                    return res.json().then(json => {\n                        if (json.detail === 'Signature has expired.') {\n                            window.location.reload();\n                            result.success = false;\n                            return result;\n                        }\n                        if (json.detail === 'Error decoding signature.') {\n                            window.location.reload();\n                            result.success = false;\n                            return result;\n                        }\n                        result.success = false;\n                        result.errors = json;\n                        return result;\n                    })\n                }\n            })\n    }\n\n    // Error handling in place for bad input\n    // handled modified/expired tokens\n    async addInstrument(model_pk, serial_number, comment) {\n        let data = {\n            item_model: model_pk,\n            serial_number: serial_number,\n            comment: comment\n        }\n\n        let result = {\n            success: true,\n            errors: {}\n        }\n        const token = localStorage.getItem('token');\n\n        return fetch(`${API_URL}/api/instruments/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json().then(json => {\n                        result.data = json;\n                        return result;\n                    });\n                } else {\n                    return res.json().then(json => {\n                        if (json.detail === 'Signature has expired.') {\n                            window.location.reload();\n                            result.success = false;\n                            return result;\n                        }\n                        if (json.detail === 'Error decoding signature.') {\n                            window.location.reload();\n                            result.success = false;\n                            return result;\n                        }\n                        result.success = false;\n                        result.errors = json;\n                        return result;\n                    })\n                }\n            })\n    }\n\n    // handling field errors and modification/expiration of tokens\n    async editInstrument(instrumentPk, model_pk, serial_number, comment) {\n        let data = {\n            item_model: model_pk,\n            serial_number: serial_number,\n            comment: comment\n        }\n\n        let result = {\n            success: true,\n            errors: []\n        }\n        const token = localStorage.getItem('token');\n\n        return fetch(`${API_URL}/api/instruments/${instrumentPk}/`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => {\n                if (res.ok) {\n                    return result;\n                } else {\n                    return res.json().then(json => {\n                        if (json.detail === 'Signature has expired.') {\n                            window.location.reload();\n                            result.success = false;\n                            return result;\n                        }\n                        if (json.detail === 'Error decoding signature.') {\n                            window.location.reload();\n                            result.success = false;\n                            return result;\n                        }\n                        result.success = false;\n                        result.errors = json;\n                        return result;\n                    })\n                }\n            })\n    }\n\n    // handled modified/expired token\n    async deleteInstrument(instrumentPk) {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            errors: []\n        }\n\n        return fetch(`${API_URL}/api/instruments/${instrumentPk}/`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        }).then(res => {\n            if (res.ok) {\n                return result;\n            } else {\n                return res.json().then(json => {\n                    if (json.detail === 'Signature has expired.') {\n                        window.location.reload();\n                        result.success = false;\n                        return result;\n                    }\n                    if (json.detail === 'Error decoding signature.') {\n                        window.location.reload();\n                        result.success = false;\n                        return result;\n                    }\n                    result.success = false;\n                    result.errors = json;\n                    return result;\n                })\n            }\n        })\n    }\n\n\n    // Note: the date needs to be a string\n    // Error handling in place for future dates\n    async addCalibrationEvent(instrument_pk, date, comment) {\n        let data = {\n            instrument: instrument_pk,\n            date: date,\n            comment: comment\n        }\n\n        let result = {\n            success: true,\n            errors: []\n        }\n\n        const token = localStorage.getItem('token');\n\n        return fetch(`${API_URL}/api/calibration_events/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => {\n                if (res.ok) {\n                    return result;\n                } else {\n                    return res.json().then(json => {\n                        result.success = false;\n                        result.errors = json;\n                        return result;\n                    })\n                }\n            })\n    }\n\n    async getCalFromInstrument(pk, pageNum, showAll) {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n            errors: []\n        }\n\n        let url = `${API_URL}/api/calibration_event_search/?instrument_pk=${pk}`;\n        if (showAll) {\n            url = `${url}&get_all`\n        } else {\n            url = `${url}&page=${pageNum}`\n        }\n\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json().then(json => {\n                        result.data = json;\n                        return result;\n                    });\n                } else {\n                    return res.json().then(json => {\n                        if (json.detail === 'Signature has expired.') {\n                            window.location.reload();\n                            result.success = false;\n                            return result;\n                        }\n                        if (json.detail === 'Error decoding signature.') {\n                            window.location.reload();\n                            result.success = false;\n                            return result;\n                        }\n                        result.success = false;\n                        result.errors = json;\n                        return result;\n                    })\n                }\n            })\n    }\n\n    // safely handled modified/expired tokens\n    async getCalibrationPDF(pk) {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            url: [],\n        }\n\n        const url = `${API_URL}/api/export_calibration_event_pdf/${pk}`;\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                Authorization: `JWT ${token}`\n            }\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.blob().then(blob => {\n                        return URL.createObjectURL(blob)\n                    })\n                        .then(url => {\n                            result.url = url;\n                            return result;\n                        })\n                } else {\n                    return res.json().then(json => {\n                        if (json.detail === 'Signature has expired.') {\n                            window.location.reload();\n                            result.success = false;\n                            return result;\n                        }\n                        if (json.detail === 'Error decoding signature.') {\n                            window.location.reload();\n                            result.success = false;\n                            return result;\n                        }\n                        result.success = false;\n                        result.errors = json;\n                        return result;\n                    })\n                }\n            })\n    }\n\n\n\n    async importInstrumentCSV(csvFile) {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            errors: [],\n            data:[]\n        }\n\n        return fetch(`${API_URL}/api/import_instruments_csv/`, {\n            method: 'PUT',\n            headers: {\n                Authorization: `JWT ${token}`,\n            },\n            body: csvFile\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json().then(json => {\n                        result.data = json;\n                        return result;\n                    });\n                } else {\n                    return res.json().then(json => {\n                        if (json.detail === 'Signature has expired.') {\n                            window.location.reload();\n                            result.success = false;\n                        }\n                        if (json.detail === 'Error decoding signature.') {\n                            window.location.reload();\n                            result.success = false;\n                        }\n                        result.success = false;\n                        result.errors = json;\n                        return result;\n                    })\n                }\n            })\n    }\n\n\n\n    async exportInstruments(filters, isAll) {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n        }\n\n        let url = `${API_URL}/api/export_instruments_csv/?`;\n        let count = 0;\n        for (var key in filters) {\n            if (count > 0) {\n                url += '&';\n            }\n            url += (key + `=${filters[key]}`);\n            count++;\n        }\n\n        if (isAll) {\n            console.log('exporting all')\n            url += `&export_models`;\n        }\n\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        }).then(res => {\n            if (res.ok) {\n                return res.blob().then(blob => {\n                    return URL.createObjectURL(blob)\n                })\n                    .then(url => {\n                        result.url = url;\n                        return result;\n                    })\n            } else {\n                return res.json().then(json => {\n                    if (json.detail === 'Signature has expired.') {\n                        window.location.reload();\n                        result.success = false;\n                        return result;\n                    }\n                    if (json.detail === 'Error decoding signature.') {\n                        window.location.reload();\n                        result.success = false;\n                        return result;\n                    }\n                    result.success = false;\n                    result.errors = json;\n                    return result;\n                })\n            }\n        }\n        )\n    }\n}\n\n","/home/vcm/evo1/ece458/frontend/src/api/modelServices.js",[],"/home/vcm/evo1/ece458/frontend/src/api/userServices.js",["173"],"/home/vcm/evo1/ece458/frontend/src/components/generic/GenericTable.js",[],"/home/vcm/evo1/ece458/frontend/src/components/generic/Util.js",[],"/home/vcm/evo1/ece458/frontend/src/components/admin/AddUserPopup.js",[],"/home/vcm/evo1/ece458/frontend/src/components/import/ImportPagePopup.js",[],"/home/vcm/evo1/ece458/frontend/src/components/model/ModelFilterBar.js",[],"/home/vcm/evo1/ece458/frontend/src/components/model/ModelTable.js",[],"/home/vcm/evo1/ece458/frontend/src/components/generic/GenericPagination.js",[],"/home/vcm/evo1/ece458/frontend/src/components/generic/GenericPopup.js",[],"/home/vcm/evo1/ece458/frontend/src/components/instrument/CalStatusKey.js",[],"/home/vcm/evo1/ece458/frontend/src/components/instrument/InstrumentFilterBar.js",[],"/home/vcm/evo1/ece458/frontend/src/components/instrument/InstrumentTable.js",["174","175"],"import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\n\nimport ExpiredIcon from \"../../assets/CalibrationIcons/Expired.png\";\nimport WarningIcon from \"../../assets/CalibrationIcons/Warning.png\";\nimport GoodIcon from \"../../assets/CalibrationIcons/Good.png\";\nimport NonCalibratableIcon from \"../../assets/CalibrationIcons/Non-Calibratable.png\";\n\nconst keys = [\"vendor\", \"model number\", \"serial\", \"short description\", \"most recent callibration date\"];\nconst headerTextArr = [\"Vendor\", \"Model\", \"Serial\", \"Description\", \"Latest Calibration\", \"Calibration Expiration\", \"Status\", \"More\", \"Calibration Certificate\"];\nlet lastSortedId = null;\n\n//Props\nlet data;   //prop array of data to display\nlet countStart; //prop int of the starting number to list for the first data point\n//'onDetailRequested': function passed in prop that will be called on a more details button click\n//'onCertificateRequested': function passed in prop that will be called on certificate button clicked\n//'sortData' handler to call when a header is clicked for sorting\n\nconst instrumentTable = (props) => {\n    data = props.data;\n    countStart = props.countStart;\n    let header = createHeader(props.sortData);\n    let body = createBody(props.onDetailRequested, props.onCertificateRequested);\n\n    return (\n        <div className=\"data-table\">\n            <Table striped bordered hover size=\"sm\">\n                <thead>\n                    {header}\n                </thead>\n                {body}\n\n            </Table>\n        </div>\n    )\n\n}\n\nconst onSortCalled = (e, parentHandler, h) => {\n    if (lastSortedId !== null) {\n        document.getElementById(lastSortedId).style.backgroundColor = \"white\";\n    }\n    document.getElementById(e.target.id).style.backgroundColor = \"rgb(147, 196, 127)\";\n    lastSortedId = e.target.id;\n    parentHandler(h);\n}\n\nconst createHeader = (onSortData) => {\n    let header = [];\n    header.push(\n        <th>#</th>\n    )\n    headerTextArr.forEach(h => {\n        header.push(\n            <th onClick={(e) => onSortCalled(e, onSortData, h)} id={h}>{h}</th>\n        )\n    })\n    return (\n        <tr>\n            {header}\n        </tr>\n    )\n}\n\nconst createBody = (onDetailRequested, onCertificateRequested) => {\n    let rows = [];\n    let count = countStart + 1;\n    data.forEach(currentData => {\n        let rowElements = []\n        rowElements.push(\n            <td>{count}</td>\n        )\n        count++;\n        rowElements.push(<td>{currentData.item_model.vendor}</td>);\n        rowElements.push(<td>{currentData.item_model.model_number}</td>)\n        rowElements.push(<td>{currentData.serial_number}</td>)\n        rowElements.push(<td>{currentData.item_model.description}</td>)\n        rowElements.push(<td>{getLatestCalibration(currentData)}</td>)\n\n        rowElements.push(\n            <td>{currentData.calibration_expiration}</td>\n        )\n        rowElements.push(\n            <td>{getCalStatus(currentData)}</td>\n        )\n        rowElements.push(\n            <td><Button value={currentData[\"pk\"]} onClick={onDetailRequested}>More</Button></td>\n        )\n        rowElements.push(\n            <td><Button value={currentData[\"pk\"]} onClick={onCertificateRequested} disabled={currentData.calibration_event.length === 0}>Download</Button></td>\n        )\n        let currentRow = (\n            <tr>\n                {rowElements}\n            </tr>\n        )\n        rows.push(currentRow);\n    })\n    return (\n        <tbody>\n            {rows}\n        </tbody>\n    );\n}\n\nconst getLatestCalibration = (currentData) => {\n    if (currentData.item_model.calibration_frequency > 0) {\n        if (currentData.calibration_event.length > 0) {\n            return currentData.calibration_event[0].date;\n        } else {\n            return \"No History\";\n        }\n    } else {\n        return \"Non-Calibratable\";\n    }\n}\n\nconst getCalStatus = (currentData) => {\n    let icon;\n    if (currentData.item_model.calibration_frequency > 0) {\n        let expireDateString = currentData.calibration_expiration;\n        if (currentData.calibration_event.length > 0) {\n            let expireDate = new Date(expireDateString);\n            let lasCalDate = new Date(currentData.calibration_event[0].date);\n            let timeDifference = expireDate.getTime() - lasCalDate.getTime();\n            let daysDifference = timeDifference / (1000 * 3600 * 24);\n            if (daysDifference > 30) {\n                icon = GoodIcon;\n            }\n            else if (daysDifference <= 30) {\n                icon = WarningIcon;\n            } else {\n                icon = ExpiredIcon;\n            }\n        } else {\n            icon = ExpiredIcon;\n        }\n    } else {\n        icon = NonCalibratableIcon;\n    }\n    return (<img src={icon} className='calibration-status-icon' />)\n}\n\ninstrumentTable.defaultProps = {\n    data: []\n}\n\nexport default instrumentTable;","/home/vcm/evo1/ece458/frontend/src/components/instrument/AddCalibrationPopup.js",[],"/home/vcm/evo1/ece458/frontend/src/components/model/AddModelPopup.js",[],"/home/vcm/evo1/ece458/frontend/src/components/instrument/AddInstrumentPopup.js",[],"/home/vcm/evo1/ece458/frontend/src/components/import/ImportInstructions.js",[],"/home/vcm/evo1/ece458/frontend/src/components/import/ImportModelTable.js",["176","177"],"import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport '../model/ModelTable.css'\n\nconst headerText = [\"Model Number\", \"Vendor\", \"Description\", \"Comments\", \"Calibration (days)\"];\nconst keys = [\"model_number\", \"vendor\", \"description\", \"comment\", \"calibration_frequency\"];\nlet lastSortedId = null;\n\n//props\nlet data;   //prop of array of model data to display\nlet countStart; //prop of int of data count to start at\n//'onDetailRequested': function passed in prop that will be called when detail view is requested, will be passed model pk\n//'sortData' event handler to call when header is clicked\n\n\nconst importModelTable = (props) => {\n    data = props.data;\n    countStart = props.countStart;\n    let header = createHeader(props.sortData);\n    let body = createBody(); \n\n    return (\n        <div className=\"data-table\">\n\n            <Table striped bordered size=\"sm\">\n            <thead>\n                {header}\n            </thead>\n            {body}\n\n            </Table>\n        </div>\n    )\n}\n\nconst onClickTableHeader = (e, onSortData, h) => {\n    if (lastSortedId !== null) {\n        document.getElementById(lastSortedId).style.backgroundColor = \"white\";\n    }\n    document.getElementById(e.target.id).style.backgroundColor = \"rgb(147, 196, 127)\";\n    lastSortedId = e.target.id;\n    onSortData(h);\n\n}\n\n\nconst createHeader = (onSortData) => {\n    let header = [];\n    header.push(\n        <th>#</th>\n    )\n    headerText.forEach(h => {\n        header.push(\n            <th onClick={(e) => onClickTableHeader(e, onSortData, h)} id={h}>{h}</th>\n        )\n    })\n    return (\n        <tr>\n            {header}\n        </tr>\n    )\n}\n\nconst createBody = () => {\n    let rows = [];\n    let count = countStart + 1;\n    data.forEach(currentData => {\n        let rowElements = []\n        rowElements.push(\n            <td>{count}</td>\n        )\n        count++;\n        keys.forEach(k => {\n            if ((k === \"calibration_frequency\") && (currentData[k] == 0)) {\n                rowElements.push(\n                    <td>N/A</td>)\n            } else {\n            rowElements.push(\n                <td>{currentData[k]}</td>\n            )\n            }\n\n        })\n        let currentRow = (\n            <tr>\n                {rowElements}\n            </tr>\n        )\n        rows.push(currentRow);\n    })\n    return (\n        <tbody>\n            {rows}\n        </tbody>\n    );\n}\n\nexport default importModelTable;","/home/vcm/evo1/ece458/frontend/src/components/import/ImportInstrumentTable.js",["178","179"],"import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\nimport '../model/ModelTable.css'\n\nconst headerText = [\"Model Number\", \"Vendor\", \"Description\", \"Comments\", \"Calibration Date\"];\nconst keys = [\"model_number\", \"vendor\", \"serial_number\", \"comment\", \"calibration_date\"];\nlet lastSortedId = null;\n\n//props\nlet data;   //prop of array of model data to display\nlet countStart; //prop of int of data count to start at\n//'onDetailRequested': function passed in prop that will be called when detail view is requested, will be passed model pk\n//'sortData' event handler to call when header is clicked\n\n\nconst importInstrumentTable = (props) => {\n    data = props.data;\n    countStart = props.countStart;\n    let header = createHeader(props.sortData);\n    let body = createBody(); \n\n    return (\n        <div className=\"data-table\">\n\n            <Table striped bordered size=\"sm\">\n            <thead>\n                {header}\n            </thead>\n            {body}\n\n            </Table>\n        </div>\n    )\n}\n\nconst onClickTableHeader = (e, onSortData, h) => {\n    if (lastSortedId !== null) {\n        document.getElementById(lastSortedId).style.backgroundColor = \"white\";\n    }\n    document.getElementById(e.target.id).style.backgroundColor = \"rgb(147, 196, 127)\";\n    lastSortedId = e.target.id;\n    onSortData(h);\n\n}\n\n\nconst createHeader = (onSortData) => {\n    let header = [];\n    header.push(\n        <th>#</th>\n    )\n    headerText.forEach(h => {\n        header.push(\n            <th onClick={(e) => onClickTableHeader(e, onSortData, h)} id={h}>{h}</th>\n        )\n    })\n    return (\n        <tr>\n            {header}\n        </tr>\n    )\n}\n\nconst createBody = () => {\n    let rows = [];\n    let count = countStart + 1;\n    data.forEach(currentData => {\n        let rowElements = []\n        rowElements.push(\n            <td>{count}</td>\n        )\n        count++;\n        keys.forEach(k => {\n            if ((k === \"calibration_frequency\") && (currentData[k] == 0)) {\n                rowElements.push(\n                    <td>N/A</td>)\n            } else {\n            rowElements.push(\n                <td>{currentData[k]}</td>\n            )\n            }\n\n        })\n        let currentRow = (\n            <tr>\n                {rowElements}\n            </tr>\n        )\n        rows.push(currentRow);\n    })\n    return (\n        <tbody>\n            {rows}\n        </tbody>\n    );\n}\n\nexport default importInstrumentTable;",{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":4,"column":25,"nodeType":"186","messageId":"187","endLine":4,"endColumn":30},{"ruleId":"184","severity":1,"message":"188","line":5,"column":10,"nodeType":"186","messageId":"187","endLine":5,"endColumn":18},{"ruleId":"184","severity":1,"message":"189","line":6,"column":7,"nodeType":"186","messageId":"187","endLine":6,"endColumn":19},{"ruleId":"190","severity":1,"message":"191","line":6,"column":3,"nodeType":"192","messageId":"193","endLine":6,"endColumn":20},{"ruleId":"184","severity":1,"message":"194","line":1,"column":17,"nodeType":"186","messageId":"187","endLine":1,"endColumn":26},{"ruleId":"184","severity":1,"message":"195","line":20,"column":7,"nodeType":"186","messageId":"187","endLine":20,"endColumn":25},{"ruleId":"184","severity":1,"message":"196","line":21,"column":5,"nodeType":"186","messageId":"187","endLine":21,"endColumn":19},{"ruleId":"184","severity":1,"message":"197","line":22,"column":5,"nodeType":"186","messageId":"187","endLine":22,"endColumn":12},{"ruleId":"198","severity":1,"message":"199","line":133,"column":5,"nodeType":"192","messageId":"200","endLine":142,"endColumn":6},{"ruleId":"201","severity":1,"message":"202","line":45,"column":17,"nodeType":"203","messageId":"200","endLine":45,"endColumn":27},{"ruleId":"190","severity":1,"message":"191","line":5,"column":5,"nodeType":"192","messageId":"193","endLine":5,"endColumn":22},{"ruleId":"190","severity":1,"message":"191","line":5,"column":5,"nodeType":"192","messageId":"193","endLine":5,"endColumn":22},{"ruleId":"184","severity":1,"message":"204","line":10,"column":7,"nodeType":"186","messageId":"187","endLine":10,"endColumn":11},{"ruleId":"205","severity":1,"message":"206","line":143,"column":13,"nodeType":"207","endLine":143,"endColumn":67},{"ruleId":"184","severity":1,"message":"208","line":3,"column":8,"nodeType":"186","messageId":"187","endLine":3,"endColumn":14},{"ruleId":"209","severity":1,"message":"210","line":75,"column":68,"nodeType":"211","messageId":"200","endLine":75,"endColumn":70},{"ruleId":"184","severity":1,"message":"208","line":3,"column":8,"nodeType":"186","messageId":"187","endLine":3,"endColumn":14},{"ruleId":"209","severity":1,"message":"210","line":75,"column":68,"nodeType":"211","messageId":"200","endLine":75,"endColumn":70},"no-native-reassign",["212"],"no-negated-in-lhs",["213"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'authServices' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Component' is defined but never used.","'instrumentServices' is assigned a value but never used.","'instrumentData' is assigned a value but never used.","'history' is defined but never used.","no-dupe-class-members","Duplicate name 'makeEditPopup'.","unexpected","no-dupe-keys","Duplicate key 'numResults'.","ObjectExpression","'keys' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Button' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","no-global-assign","no-unsafe-negation"]