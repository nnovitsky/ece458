[{"/Users/julietyznaga/Desktop/ece458/frontend/src/api/modelServices.js":"1","/Users/julietyznaga/Desktop/ece458/frontend/src/components/model/AddModelPopup.js":"2","/Users/julietyznaga/Desktop/ece458/frontend/src/components/instrument/InstrumentTable.js":"3","/Users/julietyznaga/Desktop/ece458/frontend/src/components/instrument/AddInstrumentPopup.js":"4","/Users/julietyznaga/Desktop/ece458/frontend/src/index.js":"5","/Users/julietyznaga/Desktop/ece458/frontend/src/components/ProtectedRoute.js":"6","/Users/julietyznaga/Desktop/ece458/frontend/src/components/import/ImportPage.js":"7","/Users/julietyznaga/Desktop/ece458/frontend/src/components/user/UserProfilePage.js":"8","/Users/julietyznaga/Desktop/ece458/frontend/src/components/model/ModelDetailView.js":"9","/Users/julietyznaga/Desktop/ece458/frontend/src/components/generic/Util.js":"10","/Users/julietyznaga/Desktop/ece458/frontend/src/components/generic/GenericTable.js":"11","/Users/julietyznaga/Desktop/ece458/frontend/src/components/model/ModelFilterBar.js":"12","/Users/julietyznaga/Desktop/ece458/frontend/src/components/instrument/AddCalibrationPopup.js":"13"},{"size":7256,"mtime":1612922837093,"results":"14","hashOfConfig":"15"},{"size":7701,"mtime":1612922837102,"results":"16","hashOfConfig":"15"},{"size":2422,"mtime":1612922837101,"results":"17","hashOfConfig":"15"},{"size":8420,"mtime":1612922837098,"results":"18","hashOfConfig":"15"},{"size":547,"mtime":1612726913116,"results":"19","hashOfConfig":"15"},{"size":622,"mtime":1612841013439,"results":"20","hashOfConfig":"15"},{"size":3519,"mtime":1612908606584,"results":"21","hashOfConfig":"15"},{"size":4313,"mtime":1612807299758,"results":"22","hashOfConfig":"15"},{"size":7396,"mtime":1612909772473,"results":"23","hashOfConfig":"15"},{"size":1000,"mtime":1612922837097,"results":"24","hashOfConfig":"15"},{"size":2803,"mtime":1612922837097,"results":"25","hashOfConfig":"15"},{"size":2330,"mtime":1612807299756,"results":"26","hashOfConfig":"15"},{"size":2310,"mtime":1612922837098,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},"1qqz58f",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"31"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/julietyznaga/Desktop/ece458/frontend/src/api/modelServices.js",["57"],"import modelData from './modelData.json';\n\nconst API_URL = 'http://localhost:8000';\n\nexport default class ModelServices {\n    async getModels() {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n        }\n\n        const url = `${API_URL}/api/models/`;\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        })\n            .then(res => res.json())\n            .then(\n                (json) => {\n                    if (json.detail === 'Signature has expired.') {\n                        console.log(\"GET NEW TOKEN\")\n                        result.success = false;\n                    }\n                    result.data = json.data\n                    return result\n                },\n                (error) => {\n                    console.log(error)\n                    result.success = false;\n                    return result\n                }\n            )\n    }\n\n    async addModel(vendor, modelNumber, description, comment, calFrequency) {\n        let data = {\n            vendor: vendor,\n            model_number: modelNumber,\n            description: description,\n            comment: comment,\n            calibration_frequency: calFrequency\n        }\n\n        console.log(data);\n        const token = localStorage.getItem('token');\n\n        return fetch(`${API_URL}/api/models/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => res.json())\n            .then(json => {\n                console.log(json)\n            })\n    }\n\n    async getModel(pk) {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n        }\n\n        return fetch(`${API_URL}/api/models/${pk}/`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        })\n            .then(res => res.json())\n            .then(\n                (json) => {\n                    if (json.detail === 'Signature has expired.') {\n                        console.log(\"GET NEW TOKEN\")\n                        result.success = false;\n                    }\n                    result.data = json\n                    return result\n                },\n                (error) => {\n                    console.log(error);\n                    result.success = false;\n                    return result;\n                }\n        )\n    }\n\n    async deleteModel(pk) {\n        const token = localStorage.getItem('token');\n        let result = {\n            success: true,\n            data: [],\n        }\n\n        return fetch(`${API_URL}/api/models/${pk}/`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        })\n            \n    }\n\n    async modelFilterSearch(filters) {\n        console.log(filters)\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n        }\n\n        let url = `${API_URL}/api/model_search/?`;\n        let count = 0;\n        for (var key in filters) {\n            if (count > 0) {\n                url += '&';\n            }\n            url += (key + `=${filters[key]}`);\n            count++;\n        }\n        console.log(url)\n\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        })\n            .then(res => res.json())\n            .then(\n                (json) => {\n                    if (json.detail === 'Signature has expired.') {\n                        console.log(\"GET NEW TOKEN\")\n                        result.success = false;\n                    }\n                    console.log(json)\n                    result.data = json\n                    return result\n                },\n                (error) => {\n                    console.log(error);\n                    result.success = false;\n                    return result;\n                }\n            )\n    }\n\n    async getVendors() {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n        }\n\n        let url = `${API_URL}/api/vendors/`;\n\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        })\n            .then(res => res.json())\n            .then(\n                (json) => {\n                    if (json.detail === 'Signature has expired.') {\n                        console.log(\"GET NEW TOKEN\")\n                        result.success = false;\n                    }\n                    result.data = json\n                    return result\n                },\n                (error) => {\n                    console.log(error);\n                    result.success = false;\n                    return result;\n                }\n            )\n    }\n\n    async getModelByVendor(vendor) {\n        const token = localStorage.getItem('token');\n\n        let result = {\n            success: true,\n            data: [],\n        }\n\n        let url = `${API_URL}/api/models_by_vendor/${vendor}/`;\n\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `JWT ${token}`\n            },\n        })\n            .then(res => res.json())\n            .then(\n                (json) => {\n                    if (json.detail === 'Signature has expired.') {\n                        console.log(\"GET NEW TOKEN\")\n                        result.success = false;\n                    }\n                    result.data = json\n                    return result\n                },\n                (error) => {\n                    console.log(error);\n                    result.success = false;\n                    return result;\n                }\n            )\n    }\n\n    getAllModelNumbers() {\n        let result = new Set();\n        modelData.getModels.forEach(el => {\n            result.add(el[\"model number\"]);\n        })\n        return Array.from(result);\n    }\n\n    getAllVendors() {\n        let result = new Set();\n        modelData.getModels.forEach(el => {\n            result.add(el[\"vendor\"]);\n        })\n        return Array.from(result);\n    }\n\n    getAllDescriptions() {\n        let result = new Set();\n        modelData.getModels.forEach(el => {\n            result.add(el[\"description\"]);\n        })\n        return Array.from(result);\n    }\n\n    getAllCallibrationFrequencies() {\n        let result = new Set();\n        modelData.getModels.forEach(el => {\n            result.add(el[\"callibration frequency\"]);\n        })\n        return Array.from(result);\n    }\n}\n\n",["58","59"],"/Users/julietyznaga/Desktop/ece458/frontend/src/components/model/AddModelPopup.js",[],"/Users/julietyznaga/Desktop/ece458/frontend/src/components/instrument/InstrumentTable.js",["60"],"import React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button';\n\nconst keys = [\"vendor\", \"model number\", \"serial\", \"short description\", \"most recent callibration date\"];\nconst headerTextArr = [\"Vendor\", \"Model\", \"Serial\", \"Description\", \"Last Callibration\", \"Next Callibration\", \"More\", \"Callibration Certificate\"];\n\n//Props\nlet data;   //prop array of data to display\n//'onDetailRequested': function passed in prop that will be called on a more details button click\n//'onCertificateRequested': function passed in prop that will be called on certificate button clicked\n\nconst instrumentTable = (props) => {\n    data = props.data;\n    let header = createHeader();\n    let body = createBody(props.onDetailRequested, props.onCertificateRequested);\n\n    return (\n        <Table striped bordered hover>\n            <thead>\n                {header}\n            </thead>\n            {body}\n\n        </Table>)\n}\n\nconst createHeader = () => {\n    let header = [];\n    header.push(\n        <th>#</th>\n    )\n    headerTextArr.forEach(h => {\n        header.push(\n            <th>{h}</th>\n        )\n    })\n    return (\n        <tr>\n            {header}\n        </tr>\n    )\n}\n\nconst createBody = (onDetailRequested, onCertificateRequested) => {\n    let rows = [];\n    let count = 1;\n    data.forEach(currentData => {\n        let rowElements = []\n        rowElements.push(\n            <td>{count}</td>\n        )\n        count++;\n        rowElements.push(<td>{currentData.item_model.vendor}</td>);\n        rowElements.push(<td>{currentData.item_model.model_number}</td>)\n        rowElements.push(<td>{currentData.serial_number}</td>)\n        rowElements.push(<td>{currentData.item_model.description}</td>)\n        rowElements.push(<td>FIGURE ME OUT</td>)\n\n        rowElements.push(\n            <td>TBD</td>\n        )\n        rowElements.push(\n            <td><Button value={currentData[\"pk\"]} onClick={onDetailRequested}>More</Button></td>\n        )\n        rowElements.push(\n            <td><Button value={currentData[\"pk\"]} onClick={onCertificateRequested}>Download</Button></td>\n        )\n        let currentRow = (\n            <tr>\n                {rowElements}\n            </tr>\n        )\n        rows.push(currentRow);\n    })\n    return (\n        <tbody>\n            {rows}\n        </tbody>\n    );\n}\n\ninstrumentTable.defaultProps = {\n    data: []\n}\n\nexport default instrumentTable;","/Users/julietyznaga/Desktop/ece458/frontend/src/components/instrument/AddInstrumentPopup.js",[],"/Users/julietyznaga/Desktop/ece458/frontend/src/index.js",[],"/Users/julietyznaga/Desktop/ece458/frontend/src/components/ProtectedRoute.js",[],"/Users/julietyznaga/Desktop/ece458/frontend/src/components/import/ImportPage.js",[],"/Users/julietyznaga/Desktop/ece458/frontend/src/components/user/UserProfilePage.js",[],"/Users/julietyznaga/Desktop/ece458/frontend/src/components/model/ModelDetailView.js",["61","62","63","64","65"],"/Users/julietyznaga/Desktop/ece458/frontend/src/components/generic/Util.js",[],"/Users/julietyznaga/Desktop/ece458/frontend/src/components/generic/GenericTable.js",[],"/Users/julietyznaga/Desktop/ece458/frontend/src/components/model/ModelFilterBar.js",[],"/Users/julietyznaga/Desktop/ece458/frontend/src/components/instrument/AddCalibrationPopup.js",[],{"ruleId":"66","severity":1,"message":"67","line":101,"column":13,"nodeType":"68","messageId":"69","endLine":101,"endColumn":19},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"66","severity":1,"message":"74","line":5,"column":7,"nodeType":"68","messageId":"69","endLine":5,"endColumn":11},{"ruleId":"66","severity":1,"message":"75","line":1,"column":17,"nodeType":"68","messageId":"69","endLine":1,"endColumn":26},{"ruleId":"66","severity":1,"message":"76","line":2,"column":8,"nodeType":"68","messageId":"69","endLine":2,"endColumn":22},{"ruleId":"66","severity":1,"message":"77","line":18,"column":7,"nodeType":"68","messageId":"69","endLine":18,"endColumn":25},{"ruleId":"66","severity":1,"message":"78","line":19,"column":5,"nodeType":"68","messageId":"69","endLine":19,"endColumn":19},{"ruleId":"66","severity":1,"message":"79","line":20,"column":5,"nodeType":"68","messageId":"69","endLine":20,"endColumn":12},"no-unused-vars","'result' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["80"],"no-negated-in-lhs",["81"],"'keys' is assigned a value but never used.","'Component' is defined but never used.","'EditModelPopup' is defined but never used.","'instrumentServices' is assigned a value but never used.","'instrumentData' is assigned a value but never used.","'history' is defined but never used.","no-global-assign","no-unsafe-negation"]